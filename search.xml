<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>iOS多线程知识梳理</title>
    <url>/2019/10/18/iOS%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h2 id="进程、线程与队列"><a href="#进程、线程与队列" class="headerlink" title="进程、线程与队列"></a>进程、线程与队列</h2><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ul>
<li>进程是系统中正在运行的一个应用程序，每个进程之间是独立的，每个进程均运行在专用且受保护的内存空间内</li>
<li>线程是进程的基本执行单元，一个进程中的任务都在线程中执行，所以一个进程由至少一个线程组成</li>
</ul>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>一个线程中的任务是串行的，同一时间内，一个线程只能执行一个任务。</p>
<p>一个进程可以开启多条线程，每条线程可以并行执行不同的任务。同一时间，CPU只能处理一条线程，多线程并发执行是CPU快速地在多条线程之间调度</p>
<p>iOS的多线程技术有：<code>pthread</code>、<code>NSThread</code>、<code>GCD</code>、<code>NSOperation</code></p>
<h3 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h3><p>主线程主要负责显示和刷新UI界面，处理UI事件</p>
<h3 id="队列的类型"><a href="#队列的类型" class="headerlink" title="队列的类型"></a>队列的类型</h3><ul>
<li>主队列：<code>dispatch_get_main_queue</code></li>
<li>全局并发队列：<code>dispatch_get_global_queue</code></li>
<li>自己创建队列：<code>dispatch_queue_create</code></li>
</ul>
<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>GCD:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 在这里执行耗时操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         &#x2F;&#x2F; 回到主线程，执行UI刷新操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>



<p>NSOperationQueue:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[NSOperationQueue new] addOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;子线程下载: %@&quot;, NSOperationQueue.currentQueue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;主线程刷新UI: %@&quot;, NSOperationQueue.currentQueue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;];</span></pre></td></tr></table></figure>



<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁就是队列引起的循环等待：在串行队列A中向队列A添加一个同步任务，例如主队列同步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [super viewDidLoad];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_sync(dispatch_get_main_queue(), ^&#123; &#x2F;&#x2F; 👈死锁在这一行</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; NSLog(@&quot;在主队列同步执行&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>或者在自定义线程中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; NOT OK</span></pre></td></tr><tr><td class="code"><pre><span class="line">- (void)test1 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;在主线程添加一个串行队列queue&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_SERIAL);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_async(queue, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;在串行队列queue中添加一个同步任务&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dispatch_sync(queue, ^&#123; &#x2F;&#x2F; 👈死锁在这一行</span></pre></td></tr><tr><td class="code"><pre><span class="line">            NSLog(@&quot;OK&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 这样就不会死锁了</span></pre></td></tr><tr><td class="code"><pre><span class="line">- (void)test2 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;在主线程添加一个串行队列queue&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_SERIAL);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_queue_t queue2 &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_SERIAL);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_async(queue, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;在串行队列queue2中添加一个同步任务&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dispatch_sync(queue2, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            NSLog(@&quot;OK&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><h3 id="设置最大并发数"><a href="#设置最大并发数" class="headerlink" title="设置最大并发数"></a>设置最大并发数</h3><p>NSOperationQueue：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)setMaxConcurrentOperationCount:(NSInteger)cnt;</span></pre></td></tr></table></figure>

<h3 id="设置依赖"><a href="#设置依赖" class="headerlink" title="设置依赖"></a>设置依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSOperationQueue *queue &#x3D; [[NSOperationQueue alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">NSOperation *op1 &#x3D; [NSBlockOperation blockOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sleep(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;下载图片1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">NSOperation *op2 &#x3D; [NSBlockOperation blockOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sleep(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;下载图片2&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">NSOperation *combine &#x3D; [NSBlockOperation blockOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;合成图片&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[combine addDependency:op1];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[combine addDependency:op2];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[queue addOperation:op1];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[queue addOperation:op2];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[queue addOperation:combine];</span></pre></td></tr></table></figure>

<h3 id="设置栅栏"><a href="#设置栅栏" class="headerlink" title="设置栅栏"></a>设置栅栏</h3><p>若干个网络请求结束后执行下一步操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_CONCURRENT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">dispatch_group_t group &#x3D; dispatch_group_create();</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_group_async(group, queue, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sleep(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;网络请求   ---- %d&quot;,i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">dispatch_barrier_sync(queue, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;主线程刷新UI&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>通过NSOperationQueue实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSOperationQueue *queue &#x3D; [[NSOperationQueue alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSOperation *op &#x3D; [NSBlockOperation blockOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sleep(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;网络请求   ---- %d&quot;,i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [queue addOperation:op];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">[queue addBarrierBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;刷新页面&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;];</span></pre></td></tr></table></figure>



<h3 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h3><p>在n个耗时并发任务都完成后，再去执行接下来的任务。比如，在n个网络请求完成后去刷新UI页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, DISPATCH_QUEUE_CONCURRENT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">dispatch_group_t group &#x3D; dispatch_group_create();</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_group_async(group, queue, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;网络请求   ---- %d&quot;,i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;刷新页面&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h2 id="GCD和NSOperation有什么区别"><a href="#GCD和NSOperation有什么区别" class="headerlink" title="GCD和NSOperation有什么区别"></a>GCD和NSOperation有什么区别</h2><ul>
<li>GCD是纯C语言的API；NSOperation是基于GCD的OC版本封装</li>
<li>GCD只支持FIFO的队列；NSOperation可以很方便地调整执行顺序，设置最大并发数量</li>
<li>NSOperationQueue可以轻松在operation间设置依赖关系，而GCD需要些很多代码才能实现</li>
<li>NSOperationQueue支持KVO，可以检测operation是否正在执行(isExecuted)，是否结束(isFinish),是否取消(isCancel)</li>
<li>GCD的执行速度比NSOperation快</li>
</ul>
]]></content>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI实践Demo</title>
    <url>/2019/10/17/SwiftUI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="SwiftUI入门学习实践"><a href="#SwiftUI入门学习实践" class="headerlink" title="SwiftUI入门学习实践"></a>SwiftUI入门学习实践</h1><p><a href="https://developer.apple.com/documentation/swiftui/" target="_blank" rel="noopener">Apple Developer SwiftUI</a></p>
<p><img src="https://i.loli.net/2019/11/27/iM8IsLBGhWgzvTX.png" alt="SwiftUI通用开发"></p>
<h3 id="一、SwiftUI是什么？"><a href="#一、SwiftUI是什么？" class="headerlink" title="一、SwiftUI是什么？"></a>一、SwiftUI是什么？</h3><h5 id="1-定义："><a href="#1-定义：" class="headerlink" title="1. 定义："></a>1. 定义：</h5><p><code>SwiftUI</code>是苹果在 <strong>“WWDC-2019”</strong> 推出的一款全新的 <strong>“声明式UI”</strong> 框架。 拆开看，<code>Swift</code> + <code>UI</code>，即基于Swift语言基础语法的UI框架</p>
<h5 id="2-特点："><a href="#2-特点：" class="headerlink" title="2. 特点："></a>2. 特点：</h5><ul>
<li><strong>“简洁迅速”的Swift</strong>：越来越简洁的<code>Swift</code>语法，配上<code>Swift</code>迅速的优势</li>
<li><strong>“即视”的UI</strong>：降低调试成本，一边写<code>code</code>、一边就可实时预览查看<code>UI</code>界面</li>
<li><strong>跨平台</strong>：一套代码，即可完成<code>iOS</code>、<code>iPadOS</code>、<code>macOS</code>、<code>watchOS</code>的开发与适配</li>
</ul>
<p><img src="https://i.loli.net/2019/11/24/I8Aq2jNUtpgQ5Ke.png" alt="跨平台"></p>
<ul>
<li><strong>“声明式”编程</strong>：</li>
</ul>
<p>对比之前的 <strong>“指令式”编程</strong>，我们通常需要告诉计算机<strong>“怎么做”</strong>？ 而<strong>“声明式”编程</strong>是让我们告诉计算机 <strong>“做什么”</strong>？（至于最底层怎么做，开发者无需关心）</p>
<p>举个例子，对于写UI而言，</p>
<ul>
<li>指令式编程：就是，<strong>怎么画？</strong> 把每个<code>frame</code>、<code>layout</code>等等统统需要计算到位</li>
<li>声明式编程：就是，<strong>画什么？</strong> 把想要的效果描述出来，其他都交给框架去做</li>
</ul>
<h5 id="3-开发环境："><a href="#3-开发环境：" class="headerlink" title="3. 开发环境："></a>3. 开发环境：</h5><p>这么新的技术肯定需要环境的支持。<code>SwiftUI</code>所需要的开发环境，如下：</p>
<ul>
<li>Xcode：<code>Xcode 11.1+</code></li>
<li>MacOS：<code>MacOS 10.15+</code></li>
<li>iOS：<code>iOS 13+</code></li>
</ul>
<blockquote>
<p><em>PS：由于<code>SwiftUI</code>只能应用与<code>iOS 13</code>系统以上的设备。 因此，这项技术不建议用在需要适配低版本（<code>iOS 13</code> 以下）的App上。 不过如果是无需适配低版本的新项目，或者学习者全可以上手“玩一玩”。 毕竟苹果的新技术还是很有意思的嘛~</em></p>
</blockquote>
<h3 id="二、SwiftUI的基本组件（语法）"><a href="#二、SwiftUI的基本组件（语法）" class="headerlink" title="二、SwiftUI的基本组件（语法）"></a>二、SwiftUI的基本组件（语法）</h3><blockquote>
<p>这块知识比较“基础”且“重要”。只有记住了这些基本组件，才能用较少的代码开发出精美的App</p>
</blockquote>
<p>下面是一些重要的<code>SwiftUI</code>组件：</p>
<p><strong>组件介绍</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Text</td>
<td>用来显示文本的组件，类似UIKit中的<code>UILabel</code></td>
</tr>
<tr>
<td>Image</td>
<td>用来展示图片的组件，类似UIKit中的<code>UIImageView</code></td>
</tr>
<tr>
<td>Button</td>
<td>用于可点击的按钮组件，类似UIKit中的<code>UIButton</code></td>
</tr>
<tr>
<td>List</td>
<td>用来展示列表的组件，类似UIKit中的<code>UITableView</code></td>
</tr>
<tr>
<td>ScrollView</td>
<td>用来支持滑动的组件，类似UIKit中的<code>UIScrollView</code></td>
</tr>
<tr>
<td>Spacer</td>
<td>一个灵活的空间，用来填充空白的组件</td>
</tr>
<tr>
<td>Divider</td>
<td>一条分割线，用来划分区域的组件</td>
</tr>
<tr>
<td>VStack</td>
<td>将子视图按<strong>“竖直方向”</strong>排列布局。（<code>Vertical stack</code>）</td>
</tr>
<tr>
<td>HStack</td>
<td>将子视图按<strong>“水平方向”</strong>排列布局。（<code>Horizontal stack</code>）</td>
</tr>
<tr>
<td>ZStack</td>
<td>将子视图按<strong>“两轴方向均对齐”</strong>布局（居中，有重叠效果）</td>
</tr>
</tbody></table>
<p><strong>基本组件</strong></p>
<ul>
<li>Text：用来显示文本的组件，类似UIKit中的<code>UILabel</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">"Hello, we are QiShare!"</span>).foregroundColor(.blue).font(.system(size: <span class="number">32.0</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">复制代码</span></pre></td></tr></table></figure>

<ul>
<li>Image：用来展示图片的组件，类似UIKit中的<code>UIImageView</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>.<span class="keyword">init</span>(systemName: <span class="string">"star.fill"</span>).foregroundColor(.yellow)</span></pre></td></tr><tr><td class="code"><pre><span class="line">复制代码</span></pre></td></tr></table></figure>

<ul>
<li>Button：用于可点击的按钮组件，类似UIKit中的<code>UIButton</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span>(action: &#123; <span class="keyword">self</span>.showingProfile.toggle() &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="type">Image</span>(systemName: <span class="string">"paperplane.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .imageScale(.large)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .accessibility(label: <span class="type">Text</span>(<span class="string">"Right"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .padding()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">复制代码</span></pre></td></tr></table></figure>

<ul>
<li>List：用来展示列表的组件，类似UIKit中的<code>UITableView</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">0</span>..&lt;<span class="number">5</span>)&#123;<span class="number">_</span> <span class="keyword">in</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">NavigationLink</span>.<span class="keyword">init</span>(destination: <span class="type">VStack</span>(alignment:.center)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>.<span class="keyword">init</span>(systemName: <span class="string">"\(item+1).square.fill"</span>).foregroundColor(.green)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"详情界面\(item + 1)"</span>).font(.system(size: <span class="number">16</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">//ListRow</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr></table></figure>

<ul>
<li>ScrollView：用来支持滑动的组件，类似UIKit中的<code>UIScrollView</code></li>
<li>Spacer：一个灵活的空间，用来填充空白的组件</li>
<li>Divider：一条分割线，用来划分区域的组件</li>
</ul>
<p><strong>布局组件</strong></p>
<ul>
<li>VStack：将子视图按<strong>“Y轴竖直方向”</strong>布局（Vertical stack）</li>
<li>HStack：将子视图按<strong>“X轴水平方向”</strong>布局（Horizontal stack）</li>
<li>ZStack：将子视图按<strong>“XY两轴方向均对齐”</strong>布局</li>
</ul>
<p><strong>功能组件</strong></p>
<ul>
<li>NavigationView：负责App中导航功能的组件，类似UIKit中的<code>UINavigationView</code></li>
<li>NavigationLink：负责App页面跳转的组件，类似于<code>UINavigationView</code>中的<code>push</code>与<code>pop</code>功能</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="type">List</span>(<span class="number">0</span>..&lt;<span class="number">5</span>)&#123;<span class="number">_</span> <span class="keyword">in</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">NavigationLink</span>.<span class="keyword">init</span>(destination: <span class="type">VStack</span>(alignment:.center)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>.<span class="keyword">init</span>(systemName: <span class="string">"\(item+1).square.fill"</span>).foregroundColor(.green)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"详情界面\(item + 1)"</span>).font(.system(size: <span class="number">16</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">//ListRow</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">.navigationBarTitle(<span class="string">"导航\(item)"</span>,displayMode: .inline)</span></pre></td></tr></table></figure>

<ul>
<li>TabView：负责App中的标签页功能的组件，类似UIKit中的<code>UITabBarController</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">TabView</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="type">Text</span>(<span class="string">"The First Tab"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .tabItem &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"1.square.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"First"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="type">Text</span>(<span class="string">"Another Tab"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .tabItem &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"2.square.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"Second"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="type">Text</span>(<span class="string">"The Last Tab"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .tabItem &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"3.square.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"Third"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">.font(.headline)</span></pre></td></tr></table></figure>

<h3 id="三、SwiftUI快速上手实践"><a href="#三、SwiftUI快速上手实践" class="headerlink" title="三、SwiftUI快速上手实践"></a>三、SwiftUI快速上手实践</h3><p>下面来快速实现一个有TabView、NavigationView、List的简单示例Demo</p>
<p><img src="https://i.loli.net/2019/11/24/1npsrk8Q7tZWgEM.png" alt="实时预览"></p>
<p><code>SF Symbols</code> 是从 <code>iOS 13</code> 和 <code>macOS 10.15</code> 开始内置于系统中的字符图标库，它提供了上千种常见的线条图标，而且我们可以任意地为它们设置尺寸，颜色等属性。Apple 甚至准备了专门的app：<a href="https://developer.apple.com/design/resources/" target="_blank" rel="noopener">SF Symbols</a> 来帮助你查看可用的符号：</p>
<p>接下来就让我们用这些<code>Symbols</code>制作个小Demo</p>
<ul>
<li>ContentView.swift：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> isLeftNav = <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> isRightNav = <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">init</span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//修改导航栏文字颜色</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">UINavigationBar</span>.appearance().largeTitleTextAttributes = [.foregroundColor: <span class="type">UIColor</span>.systemBlue]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">UINavigationBar</span>.appearance().titleTextAttributes = [.foregroundColor: <span class="type">UIColor</span>.systemBlue]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">UINavigationBar</span>.appearance().tintColor = .systemBlue</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">TabView</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// Tab1:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">NavigationView</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">List</span>(<span class="type">Symbols</span>, id:\.<span class="keyword">self</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">ListRow</span>(symbol: $<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .navigationBarTitle(<span class="type">Text</span>(<span class="string">"SF Symbols"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .navigationBarItems(leading: leftNavButton, trailing: rightNavButton)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;.tabItem &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Image</span>.<span class="keyword">init</span>(systemName: <span class="string">"star.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(<span class="string">"Tab1"</span>).font(.subheadline)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// Tab2:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">NavigationView</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(<span class="string">"This is the second tab."</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;.tabItem &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Image</span>.<span class="keyword">init</span>(systemName: <span class="string">"star.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(<span class="string">"Tab2"</span>).font(.subheadline)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> leftNavButton: some <span class="type">View</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">Button</span>(action: &#123; <span class="keyword">self</span>.isLeftNav.toggle() &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"person.crop.circle"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .imageScale(.large)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .accessibility(label: <span class="type">Text</span>(<span class="string">"Left"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .padding()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .sheet(isPresented: $isLeftNav) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">VStack</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(<span class="string">"Hello, we are QiShare!"</span>).foregroundColor(.blue).font(.system(size: <span class="number">32.0</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">HStack</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Text</span>(<span class="string">"an iOS Team. "</span>).fontWeight(.black).foregroundColor(.purple)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Text</span>(<span class="string">"We are learning SwiftUI."</span>).foregroundColor(.blue)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> rightNavButton: some <span class="type">View</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">Button</span>(action: &#123; <span class="keyword">self</span>.isRightNav.toggle() &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"paperplane.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .imageScale(.large)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .accessibility(label: <span class="type">Text</span>(<span class="string">"Right"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .padding()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .sheet(isPresented: $isRightNav, onDismiss: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">print</span>(<span class="string">"dissmiss RrightNav"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">ZStack</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(<span class="string">"This is the Right Navi Button."</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ListRow.swift：List对应的Cell</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListRow</span>: <span class="title">View</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> symbol: <span class="type">String</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">NavigationLink</span>(destination: <span class="type">ListDetail</span>(symbol: symbol)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">HStack</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//图片</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Image</span>(systemName: symbol)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    .resizable()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    .frame(width: <span class="number">60</span>, height: <span class="number">60</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    .foregroundColor(<span class="type">Colors</span>.randomElement())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//分割</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Divider</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//文字</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(symbol)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ListDetail.swift：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListDetail</span>: <span class="title">View</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> symbol: <span class="type">String</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">VStack</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"Image:"</span>).font(.headline)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: symbol)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .foregroundColor(<span class="type">Colors</span>.randomElement())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .imageScale(.large)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .scaleEffect(<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .padding(.bottom, <span class="number">100</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Divider</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"Image Name:"</span>).font(.headline)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(symbol)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .font(.largeTitle)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .navigationBarTitle(symbol)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>源码：<a href="https://github.com/QiShare/Qi_SwiftUI_Demo" target="_blank" rel="noopener">本文Demo</a></p>
]]></content>
      <categories>
        <category>SwiftUI</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS底层原理总结 - 探寻OC对象的本质</title>
    <url>/2018/07/17/iOS%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93%20-%20%E6%8E%A2%E5%AF%BBOC%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    <content><![CDATA[<p>转载自：<a href="https://www.jianshu.com/p/91a9176851cd" target="_blank" rel="noopener">iOS底层原理总结</a></p>
<p>对小码哥底层班视频学习的总结与记录。面试题部分，通过对面试题的分析探索问题的本质内容。</p>
<blockquote>
<p>面试题：一个NSObject对象占用多少内存？</p>
</blockquote>
<p>探寻OC对象的本质，我们平时编写的Objective-C代码，底层实现其实都是C\C++代码。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1434508-7c3e4ae59cb80fc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="img"></p>
<p>OC的对象结构都是通过基础C\C++的结构体实现的。<br>我们通过创建OC文件及对象，并将OC文件转化为C++文件来探寻OC对象的本质</p>
<p>OC如下代码</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Hello, World!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>我们通过命令行将OC的mian.m文件转化为c++文件。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">clang -rewrite-objc main.m -o main.cpp <span class="comment">// 这种方式没有指定架构例如arm64架构 其中cpp代表（c plus plus）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">生成 main.cpp</span></pre></td></tr></table></figure>

<p>我们可以指定架构模式的命令行，使用xcode工具 xcrun</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">xcrun</span> <span class="selector-tag">-sdk</span> <span class="selector-tag">iphoneos</span> <span class="selector-tag">clang</span> <span class="selector-tag">-arch</span> <span class="selector-tag">arm64</span> <span class="selector-tag">-rewrite-objc</span> <span class="selector-tag">main</span><span class="selector-class">.m</span> <span class="selector-tag">-o</span> <span class="selector-tag">main-arm64</span><span class="selector-class">.cpp</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">生成 <span class="selector-tag">main-arm64</span><span class="selector-class">.cpp</span></span></pre></td></tr></table></figure>

<p>main-arm64.cpp 文件中搜索NSObjcet，可以找到NSObjcet_IMPL（IMPL代表 implementation 实现）</p>
<p>我们看一下NSObject_IMPL内部</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NSObject_IMPL</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class isa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 查看Class本质</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> *<span class="title">Class</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//我们发现Class其实就是一个指针，对象底层实现其实就是这个样子。</span></span></pre></td></tr></table></figure>

<p>思考： 一个OC对象在内存中是如何布局的。<br> NSObjcet的底层实现，点击NSObjcet进入发现NSObject的内部实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">@interface NSObject &lt;NSObject&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic push</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic ignored <span class="meta-string">"-Wobjc-interface-ivars"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic pop</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">@end</span></pre></td></tr></table></figure>

<p>转化为c语言其实就是一个结构体</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NSObject_IMPL</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class isa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<blockquote>
<p>那么这个结构体占多大的内存空间呢，我们发现这个结构体只有一个成员，isa指针，而指针在64位架构中占8个字节。也就是说一个NSObjec对象所占用的内存是8个字节。到这里我们已经可以基本解答第一个问题。但是我们发现NSObject对象中还有很多方法，那这些方法不占用内存空间吗？其实类的方法等也占用内存空间，但是这些方法所占用的存储空间并不在NSObject对象中。</p>
</blockquote>
<p>为了探寻OC对象在内存中如何体现，我们来看下面一段代码</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</span></pre></td></tr></table></figure>

<p>上面一段代码在内存中如何体现的呢？</p>
<p>上述一段代码中系统为NSObject对象分配8个字节的内存空间，用来存放一个成员isa指针。</p>
<p>那么isa指针这个变量的地址就是结构体的地址，也就是NSObjcet对象的地址。<br> 假设isa的地址为0x100400110，那么上述代码分配存储空间给NSObject对象，然后将存储空间的地址赋值给objc指针。</p>
<p>objc存储的就是isa的地址</p>
<p>objc指向内存中NSObject对象地址，即指向内存中的结构体，也就是isa的位置。</p>
<h3 id="自定义类的内部实现"><a href="#自定义类的内部实现" class="headerlink" title="自定义类的内部实现"></a>自定义类的内部实现</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">NSObject</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@public</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Student *stu = [[Student alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        stu -&gt; _no = <span class="number">4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        stu -&gt; _age = <span class="number">5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,stu);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr></table></figure>

<p>按照上述步骤同样生成c++文件。并查找Student，我们发现Student_IMPL</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student_IMPL</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NSObject_IMPL</span> <span class="title">NSObject_IVARS</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<p>发现第一个是 NSObject_IMPL的实现。而通过上面的实验我们知道NSObject_IMPL内部其实就是Class isa<br> 那么我们假设 struct NSObject_IMPL NSObject_IVARS; 等价于 Class isa;</p>
<p>可以将上述代码转化为</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student_IMPL</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class *isa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<p>因此此结构体占用多少存储空间，对象就占用多少存储空间。因此结构体占用的存储空间为，isa指针8个字节空间+int类型_no4个字节空间+int类型_age4个字节空间共16个字节空间</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">Student *stu = [[Student alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">stu -&gt; _no = <span class="number">4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">stu -&gt; _age = <span class="number">5</span>;</span></pre></td></tr></table></figure>

<p>那么上述代码实际上在内存中的体现为，创建Student对象首先会分配16个字节，存储3个东西，isa指针8个字节，4个字节的_no ,4个字节的_age</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/18569867-7779e69767c0143c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>image.png</p>
<p>sutdent对象的3个变量分别有自己的地址。而stu指向isa指针的地址。因此stu的地址为0x100400110，stu对象在内存中占用16个字节的空间。并且经过赋值，_no里面存储4 ，_age里面存储5</p>
<p>验证Student在内存中模样</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Student_IMPL &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class isa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">NSObject</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@public</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 强制转化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">struct</span> Student_IMPL *stuImpl = (__bridge <span class="keyword">struct</span> Student_IMPL *)stu;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"_no = %d, _age = %d"</span>, stuImpl-&gt;_no, stuImpl-&gt;_age); <span class="comment">// 打印出 _no = 4, _age = 5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上述代码将oc对象强转成Student_IMPL的结构体。也就是说把一个指向oc对象的指针，指向这种结构体。由于我们之前猜想，对象在内存中的布局与结构体在内存中的布局相同，那么如果可以转化成功，说明我们的猜想正确。由此说明stu这个对象指向的内存确实是一个结构体。</p>
<p>实际上想要获取对象占用内存的大小，可以通过更便捷的运行时方法来获取。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">class_getInstanceSize([Student <span class="class"><span class="keyword">class</span>])</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">NSLog(@<span class="string">"%zd,%zd"</span>, class_getInstanceSize([NSObject <span class="class"><span class="keyword">class</span>]) ,<span class="type">class_getInstanceSize</span></span>([Student <span class="class"><span class="keyword">class</span>]));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 打印信息 8和16</span></span></pre></td></tr></table></figure>

<h4 id="窥探内存结构"><a href="#窥探内存结构" class="headerlink" title="窥探内存结构"></a>窥探内存结构</h4><p>实时查看内存数据</p>
<p><strong>方式一：通过打断点。</strong><br> Debug Workflow -&gt; viewMemory address中输入stu的地址</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-1c2f8f333637cb41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<p>image</p>
<p>从上图中，我们可以发现读取数据从高位数据开始读，查看前16位字节，每四个字节读出的数据为<br> 16进制 0x0000004(4字节) 0x0000005(4字节) isa的地址为 00D1081000001119(8字节)</p>
<p><strong>方式二：通过lldb指令xcode自带的调试器</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">memory read <span class="number">0x10074c450</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 简写  x 0x10074c450</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 增加读取条件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// memory read/数量格式字节数  内存地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 简写 x/数量格式字节数  内存地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 格式 x是16进制，f是浮点，d是10进制</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 字节大小   b：byte 1字节，h：half word 2字节，w：word 4字节，g：giant word 8字节</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">示例：x/<span class="number">4</span>xw    <span class="comment">//   /后面表示如何读取数据 w表示4个字节4个字节读取，x表示以16进制的方式读取数据，4则表示读取4次</span></span></pre></td></tr></table></figure>

<p>同时也可以通过lldb修改内存中的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">memory write 0x100400c68 6</span></pre></td></tr><tr><td class="code"><pre><span class="line">将_no的值改为了6</span></pre></td></tr></table></figure>

<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-0f4104937adf7401.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/724/format/webp" alt="img"></p>
<p>image</p>
<blockquote>
<p>那么一个NSObject对象占用多少内存？<br> <strong>NSObjcet实际上是只有一个名为isa的指针的结构体，因此占用一个指针变量所占用的内存空间大小，如果64bit占用8个字节，如果32bit占用4个字节。</strong></p>
</blockquote>
<h2 id="更复杂的继承关系"><a href="#更复杂的继承关系" class="headerlink" title="更复杂的继承关系"></a>更复杂的继承关系</h2><blockquote>
<p>面试题：在64bit环境下， 下面代码的输出内容？</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Person */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* Student */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">Person</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%zd  %zd"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">              class_getInstanceSize([Person <span class="keyword">class</span>]),</span></pre></td></tr><tr><td class="code"><pre><span class="line">              class_getInstanceSize([Student <span class="keyword">class</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">              );</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<blockquote>
<p>这道面试题的实质是想问一个Person对象，一个Student对象分别占用多少内存空间？</p>
</blockquote>
<p>我们依据上面的分析与发现，类对象实质上是以结构体的形式存储在内存中，画出真正的内存图例</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-dded6a79a629de09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1056/format/webp" alt="img"></p>
<p>image</p>
<p><strong>我们发现只要是继承自NSObject的对象，那么底层结构体内一定有一个isa指针。</strong><br> 那么他们所占的内存空间是多少呢？单纯的将指针和成员变量所占的内存相加即可吗？上述代码实际打印的内容是16 16，也就是说，person对象和student对象所占用的内存空间都为16个字节。<br> 其实实际上person对象确实只使用了12个字节。但是因为内存对齐的原因。使person对象也占用16个字节。</p>
<blockquote>
<p>编译器在给结构体开辟空间时，首先找到结构体中最宽的基本数据类型，然后寻找内存地址能是该基本数据类型的整倍的位置，作为结构体的首地址。将这个最宽的基本数据类型的大小作为对齐模数。<br> 为结构体的一个成员开辟空间之前，编译器首先检查预开辟空间的首地址相对于结构体首地址的偏移是否是本成员的整数倍，若是，则存放本成员，反之，则在本成员和上一个成员之间填充一定的字节，以达到整数倍的要求，也就是将预开辟空间的首地址后移几个字节。</p>
</blockquote>
<blockquote>
<p>我们可以总结内存对齐为两个原则：<br> <strong>原则 1. 前面的地址必须是后面的地址正数倍,不是就补齐。</strong><br> <strong>原则 2. 整个Struct的地址必须是最大字节的整数倍。</strong></p>
</blockquote>
<p>通过上述内存对齐的原则我们来看，person对象的第一个地址要存放isa指针需要8个字节，第二个地址要存放_age成员变量需要4个字节，根据原则一，8是4的整数倍，符合原则一，不需要补齐。然后检查原则2，目前person对象共占据12个字节的内存，不是最大字节数8个字节的整数倍，所以需要补齐4个字节，因此person对象就占用16个字节空间。</p>
<p>而对于student对象，我们知道sutdent对象中，包含person对象的结构体实现，和一个int类型的_no成员变量，同样isa指针8个字节，_age成员变量4个字节，_no成员变量4个字节，刚好满足原则1和原则2，所以student对象占据的内存空间也是16个字节。</p>
<h3 id="OC对象的分类"><a href="#OC对象的分类" class="headerlink" title="OC对象的分类"></a>OC对象的分类</h3><blockquote>
<p>面试题：OC的类信息存放在哪里。<br> 面试题：对象的isa指针指向哪里。</p>
</blockquote>
<p>示例代码</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* Person */</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@public</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">int</span> height;</span></pre></td></tr><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)personMethod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)personClassMethod;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)personMethod &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)personClassMethod &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* Student */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">Person</span> &lt;<span class="title">NSCoding</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@public</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">int</span> score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)studentMethod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)studentClassMethod;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)studentMethod &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)studentClassMethod &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;      </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSObject</span> *object1 = [[<span class="built_in">NSObject</span> alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSObject</span> *object2 = [[<span class="built_in">NSObject</span> alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Student *stu = [[Student alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [Student load];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Person *p1 = [[Person alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p1-&gt;_age = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [p1 personMethod];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [Person personClassMethod];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Person *p2 = [[Person alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p2-&gt;_age = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>OC的类信息存放在哪里</strong><br> OC对象主要可以分为三种</p>
<ol>
<li>instance对象（实例对象）</li>
<li>class对象（类对象）</li>
<li>meta-class对象（元类对象）</li>
</ol>
<p><strong>instance对象就是通过类alloc出来的对象，每次调用alloc都会产生新的instance对象</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSObjcet</span> *object1 = [[<span class="built_in">NSObjcet</span> alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">NSObjcet</span> *object2 = [[<span class="built_in">NSObjcet</span> alloc] init];</span></pre></td></tr></table></figure>

<p>object1和object2都是NSObject的instace对象（实例对象），但他们是不同的两个对象，并且分别占据着两块不同的内存。<br> instance对象在内存中存储的信息包括</p>
<ol>
<li>isa指针</li>
<li>其他成员变量</li>
</ol>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-c564b99ce9ba8c10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1083/format/webp" alt="img"></p>
<p>image</p>
<blockquote>
<p>衍生问题：在上图实例对象中根本没有看到方法，那么实例对象的方法的代码放在什么地方呢？那么类的方法的信息，协议的信息，属性的信息都存放在什么地方呢？</p>
</blockquote>
<p><strong>class对象</strong><br> 我们通过class方法或runtime方法得到一个class对象。class对象也就是类对象</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Class objectClass1 = [object1 <span class="class"><span class="keyword">class</span>];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass2 = [object2 <span class="class"><span class="keyword">class</span>];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass3 = [NSObject <span class="class"><span class="keyword">class</span>];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// runtime</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass4 = object_getClass(object1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass5 = object_getClass(object2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">NSLog(@<span class="string">"%p %p %p %p %p"</span>, objectClass1, objectClass2, objectClass3, objectClass4, objectClass5);</span></pre></td></tr></table></figure>

<p><strong>每一个类在内存中有且只有一个class对象。可以通过打印内存地址证明</strong></p>
<p>class对象在内存中存储的信息主要包括</p>
<ol>
<li>isa指针</li>
<li>superclass指针</li>
<li>类的属性信息（@property），类的成员变量信息（ivar）</li>
<li>类的对象方法信息（instance method），类的协议信息（protocol）</li>
</ol>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-c3527113c4cc1c08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/316/format/webp" alt="img"></p>
<p>image</p>
<p><strong>成员变量的值时存储在实例对象中的，因为只有当我们创建实例对象的时候才为成员变赋值。但是成员变量叫什么名字，是什么类型，只需要有一份就可以了。所以存储在class对象中。</strong></p>
<p>类方法放在那里？<br> <strong>元类对象 meta-class</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//runtime中传入类对象此时得到的就是元类对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectMetaClass = object_getClass([<span class="built_in">NSObject</span> <span class="keyword">class</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 而调用类对象的class方法时得到还是类对象，无论调用多少次都是类对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class cls = [[<span class="built_in">NSObject</span> <span class="keyword">class</span>] <span class="keyword">class</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass3 = [<span class="built_in">NSObject</span> <span class="keyword">class</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">class_isMetaClass(objectMetaClass) <span class="comment">// 判断该对象是否为元类对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%p %p %p"</span>, objectMetaClass, objectClass3, cls); <span class="comment">// 后面两个地址相同，说明多次调用class得到的还是类对象</span></span></pre></td></tr></table></figure>

<p><strong>每个类在内存中有且只有一个meta-class对象。</strong><br> meta-class对象和class对象的内存结构是一样的，但是用途不一样，在内存中存储的信息主要包括</p>
<ol>
<li>isa指针</li>
<li>superclass指针</li>
<li>类的类方法的信息（class method）</li>
</ol>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-4aca671a18181443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/328/format/webp" alt="img"></p>
<p>image</p>
<p><strong>meta-class对象和class对象的内存结构是一样的，所以meta-class中也有类的属性信息，类的对象方法信息等成员变量，但是其中的值可能是空的。</strong></p>
<p><strong>对象的isa指针指向哪里</strong></p>
<ol>
<li>当对象调用实例方法的时候，我们上面讲到，实例方法信息是存储在class类对象中的，那么要想找到实例方法，就必须找到class类对象，那么此时isa的作用就来了。</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">stu studentMethod</span>];</span></pre></td></tr></table></figure>

<p><strong>instance的isa指向class，当调用对象方法时，通过instance的isa找到class，最后找到对象方法的实现进行调用。</strong></p>
<ol>
<li>当类对象调用类方法的时候，同上，类方法是存储在meta-class元类对象中的。那么要找到类方法，就需要找到meta-class元类对象，而class类对象的isa指针就指向元类对象</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Student studentClassMethod</span>];</span></pre></td></tr></table></figure>

<p><strong>class的isa指向meta-class<br> 当调用类方法时，通过class的isa找到meta-class，最后找到类方法的实现进行调用</strong></p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-e71cf3850379fe21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1145/format/webp" alt="img"></p>
<p>image</p>
<ol>
<li>当对象调用其父类对象方法的时候，又是怎么找到父类对象方法的呢？，此时就需要使用到class类对象superclass指针。</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">stu personMethod</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[<span class="meta">stu init</span>];</span></pre></td></tr></table></figure>

<p><strong>当Student的instance对象要调用Person的对象方法时，会先通过isa找到Student的class，然后通过superclass找到Person的class，最后找到对象方法的实现进行调用，同样如果Person发现自己没有响应的对象方法，又会通过Person的superclass指针找到NSObject的class对象，去寻找响应的方法</strong></p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-c424291af118ebad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<p>image</p>
<ol>
<li>当类对象调用父类的类方法时，就需要先通过isa指针找到meta-class，然后通过superclass去寻找响应的方法</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Student personClassMethod</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[<span class="meta">Student load</span>];</span></pre></td></tr></table></figure>

<p><strong>当Student的class要调用Person的类方法时，会先通过isa找到Student的meta-class，然后通过superclass找到Person的meta-class，最后找到类方法的实现进行调用</strong></p>
<p>最后又是这张静定的isa指向图，经过上面的分析我们在来看这张图，就显得清晰明了很多。</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-49ba7d6446b3ded2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/449/format/webp" alt="img"></p>
<p>image</p>
<blockquote>
<p><strong>对isa、superclass总结</strong></p>
<ol>
<li>instance的isa指向class</li>
<li>class的isa指向meta-class</li>
<li>meta-class的isa指向基类的meta-class，基类的isa指向自己</li>
<li>class的superclass指向父类的class，如果没有父类，superclass指针为nil</li>
<li>meta-class的superclass指向父类的meta-class，基类的meta-class的superclass指向基类的class</li>
<li>instance调用对象方法的轨迹，isa找到class，方法不存在，就通过superclass找父类</li>
<li>class调用类方法的轨迹，isa找meta-class，方法不存在，就通过superclass找父类</li>
</ol>
</blockquote>
<h3 id="如何证明isa指针的指向真的如上面所说？"><a href="#如何证明isa指针的指向真的如上面所说？" class="headerlink" title="如何证明isa指针的指向真的如上面所说？"></a>如何证明isa指针的指向真的如上面所说？</h3><p>我们通过如下代码证明：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">NSObject *<span class="keyword">object</span> = [[NSObject alloc] <span class="keyword">init</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass = [NSObject <span class="class"><span class="keyword">class</span>];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectMetaClass = object_getClass([NSObject <span class="class"><span class="keyword">class</span>]);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">NSLog(@<span class="string">"%p %p %p"</span>, <span class="keyword">object</span>, objectClass, objectMetaClass);</span></pre></td></tr></table></figure>

<p>打断点并通过控制台打印相应对象的isa指针</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-00e99ea5045212df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/407/format/webp" alt="img"></p>
<p>image</p>
<p>我们发现object-&gt;isa与objectClass的地址不同，这是因为从64bit开始，isa需要进行一次位运算，才能计算出真实地址。而位运算的值我们可以通过下载<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fopensource.apple.com%2Ftarballs%2Fobjc4%2F" target="_blank" rel="noopener">objc源代码</a>找到。</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-276d3011130264db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/453/format/webp" alt="img"></p>
<p>image</p>
<p>我们通过位运算进行验证。</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-f2268e81904fb832.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/470/format/webp" alt="img"></p>
<p>image</p>
<p>我们发现，object-isa指针地址0x001dffff96537141经过同0x00007ffffffffff8位运算，得出objectClass的地址0x00007fff96537140</p>
<p>接着我们来验证class对象的isa指针是否同样需要位运算计算出meta-class对象的地址。<br> 当我们以同样的方式打印objectClass-&gt;isa指针时，发现无法打印</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-38ec0ad027ade31e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1046/format/webp" alt="img"></p>
<p>image</p>
<p>同时也发现左边objectClass对象中并没有isa指针。我们来到Class内部看一下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> *<span class="title">Class</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !__OBJC2__</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_ivar_list</span> * _<span class="title">Nullable</span> <span class="title">ivars</span>                  <span class="title">OBJC2_UNAVAILABLE</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_method_list</span> * _<span class="title">Nullable</span> * _<span class="title">Nullable</span> <span class="title">methodLists</span>                    <span class="title">OBJC2_UNAVAILABLE</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_cache</span> * _<span class="title">Nonnull</span> <span class="title">cache</span>                       <span class="title">OBJC2_UNAVAILABLE</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_protocol_list</span> * _<span class="title">Nullable</span> <span class="title">protocols</span>          <span class="title">OBJC2_UNAVAILABLE</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></span></pre></td></tr></table></figure>

<p>相信了解过isa指针的同学对objc_class结构体内的内容很熟悉了，今天这里不深入研究，我们只看第一个对象是一个isa指针，为了拿到isa指针的地址，我们自己创建一个同样的结构体并通过强制转化拿到isa指针。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xx_cc_objc_class</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class isa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass = [NSObject class];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xx_cc_objc_class</span></span> *objectClass2 = (__bridge <span class="class"><span class="keyword">struct</span> <span class="title">xx_cc_objc_class</span></span> *)(objectClass);</span></pre></td></tr></table></figure>

<p>此时我们重新验证一下</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-878ba6c819b229a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/499/format/webp" alt="img"></p>
<p>image</p>
<p>确实，objectClass2的isa指针经过位运算之后的地址是meta-class的地址。</p>
<h3 id="本文面试题总结："><a href="#本文面试题总结：" class="headerlink" title="本文面试题总结："></a>本文面试题总结：</h3><ol>
<li>一个NSObject对象占用多少内存？<br> 答：一个指针变量所占用的大小（64bit占8个字节，32bit占4个字节）</li>
<li>对象的isa指针指向哪里？<br> 答：instance对象的isa指针指向class对象，class对象的isa指针指向meta-class对象，meta-class对象的isa指针指向基类的meta-class对象，基类自己的isa指针也指向自己。</li>
<li>OC的类信息存放在哪里？<br> 答：成员变量的具体值存放在instance对象。对象方法，协议，属性，成员变量信息存放在class对象。类方法信息存放在meta-class对象。</li>
</ol>
<h3 id="底层原理相关文章："><a href="#底层原理相关文章：" class="headerlink" title="底层原理相关文章："></a>底层原理相关文章：</h3><p><a href="https://www.jianshu.com/notebooks/24110540" target="_blank" rel="noopener">iOS底层原理总结 - 文集</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>OC</tag>
      </tags>
  </entry>
</search>
