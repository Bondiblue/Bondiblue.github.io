<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>iOS多线程知识梳理</title>
    <url>/2019/10/18/iOS%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h2 id="进程、线程与队列"><a href="#进程、线程与队列" class="headerlink" title="进程、线程与队列"></a>进程、线程与队列</h2><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><ul>
<li>进程是系统中正在运行的一个应用程序，每个进程之间是独立的，每个进程均运行在专用且受保护的内存空间内</li>
<li>线程是进程的基本执行单元，一个进程中的任务都在线程中执行，所以一个进程由至少一个线程组成</li>
</ul>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>一个线程中的任务是串行的，同一时间内，一个线程只能执行一个任务。</p>
<p>一个进程可以开启多条线程，每条线程可以并行执行不同的任务。同一时间，CPU只能处理一条线程，多线程并发执行是CPU快速地在多条线程之间调度</p>
<p>iOS的多线程技术有：<code>pthread</code>、<code>NSThread</code>、<code>GCD</code>、<code>NSOperation</code></p>
<h3 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h3><p>主线程主要负责显示和刷新UI界面，处理UI事件</p>
<h3 id="队列的类型"><a href="#队列的类型" class="headerlink" title="队列的类型"></a>队列的类型</h3><ul>
<li>主队列：<code>dispatch_get_main_queue</code></li>
<li>全局并发队列：<code>dispatch_get_global_queue</code></li>
<li>自己创建队列：<code>dispatch_queue_create</code></li>
</ul>
<h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><p>GCD:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 在这里执行耗时操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         &#x2F;&#x2F; 回到主线程，执行UI刷新操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>



<p>NSOperationQueue:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[NSOperationQueue new] addOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;子线程下载: %@&quot;, NSOperationQueue.currentQueue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [[NSOperationQueue mainQueue] addOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;主线程刷新UI: %@&quot;, NSOperationQueue.currentQueue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;];</span></pre></td></tr></table></figure>



<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁就是队列引起的循环等待：在串行队列A中向队列A添加一个同步任务，例如主队列同步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [super viewDidLoad];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_sync(dispatch_get_main_queue(), ^&#123; &#x2F;&#x2F; 👈死锁在这一行</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; NSLog(@&quot;在主队列同步执行&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>或者在自定义线程中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; NOT OK</span></pre></td></tr><tr><td class="code"><pre><span class="line">- (void)test1 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;在主线程添加一个串行队列queue&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_SERIAL);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_async(queue, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;在串行队列queue中添加一个同步任务&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dispatch_sync(queue, ^&#123; &#x2F;&#x2F; 👈死锁在这一行</span></pre></td></tr><tr><td class="code"><pre><span class="line">            NSLog(@&quot;OK&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 这样就不会死锁了</span></pre></td></tr><tr><td class="code"><pre><span class="line">- (void)test2 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;在主线程添加一个串行队列queue&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_SERIAL);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_queue_t queue2 &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_SERIAL);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_async(queue, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;在串行队列queue2中添加一个同步任务&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        dispatch_sync(queue2, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            NSLog(@&quot;OK&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="线程管理"><a href="#线程管理" class="headerlink" title="线程管理"></a>线程管理</h2><h3 id="设置最大并发数"><a href="#设置最大并发数" class="headerlink" title="设置最大并发数"></a>设置最大并发数</h3><p>NSOperationQueue：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)setMaxConcurrentOperationCount:(NSInteger)cnt;</span></pre></td></tr></table></figure>

<h3 id="设置依赖"><a href="#设置依赖" class="headerlink" title="设置依赖"></a>设置依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSOperationQueue *queue &#x3D; [[NSOperationQueue alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">NSOperation *op1 &#x3D; [NSBlockOperation blockOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sleep(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;下载图片1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">NSOperation *op2 &#x3D; [NSBlockOperation blockOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sleep(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;下载图片2&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">NSOperation *combine &#x3D; [NSBlockOperation blockOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;合成图片&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[combine addDependency:op1];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[combine addDependency:op2];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[queue addOperation:op1];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[queue addOperation:op2];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[queue addOperation:combine];</span></pre></td></tr></table></figure>

<h3 id="设置栅栏"><a href="#设置栅栏" class="headerlink" title="设置栅栏"></a>设置栅栏</h3><p>若干个网络请求结束后执行下一步操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;test&quot;, DISPATCH_QUEUE_CONCURRENT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">dispatch_group_t group &#x3D; dispatch_group_create();</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_group_async(group, queue, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sleep(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;网络请求   ---- %d&quot;,i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">dispatch_barrier_sync(queue, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;主线程刷新UI&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<p>通过NSOperationQueue实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NSOperationQueue *queue &#x3D; [[NSOperationQueue alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSOperation *op &#x3D; [NSBlockOperation blockOperationWithBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sleep(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;网络请求   ---- %d&quot;,i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [queue addOperation:op];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">[queue addBarrierBlock:^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;刷新页面&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;];</span></pre></td></tr></table></figure>



<h3 id="线程组"><a href="#线程组" class="headerlink" title="线程组"></a>线程组</h3><p>在n个耗时并发任务都完成后，再去执行接下来的任务。比如，在n个网络请求完成后去刷新UI页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dispatch_queue_t queue &#x3D; dispatch_queue_create(&quot;queue&quot;, DISPATCH_QUEUE_CONCURRENT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">dispatch_group_t group &#x3D; dispatch_group_create();</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; 10; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_group_async(group, queue, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSLog(@&quot;网络请求   ---- %d&quot;,i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;刷新页面&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h2 id="GCD和NSOperation有什么区别"><a href="#GCD和NSOperation有什么区别" class="headerlink" title="GCD和NSOperation有什么区别"></a>GCD和NSOperation有什么区别</h2><ul>
<li>GCD是纯C语言的API；NSOperation是基于GCD的OC版本封装</li>
<li>GCD只支持FIFO的队列；NSOperation可以很方便地调整执行顺序，设置最大并发数量</li>
<li>NSOperationQueue可以轻松在operation间设置依赖关系，而GCD需要些很多代码才能实现</li>
<li>NSOperationQueue支持KVO，可以检测operation是否正在执行(isExecuted)，是否结束(isFinish),是否取消(isCancel)</li>
<li>GCD的执行速度比NSOperation快</li>
</ul>
]]></content>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>SwiftUI实践Demo</title>
    <url>/2019/10/17/SwiftUI%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%8F%8A%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="SwiftUI入门学习实践"><a href="#SwiftUI入门学习实践" class="headerlink" title="SwiftUI入门学习实践"></a>SwiftUI入门学习实践</h1><p><a href="https://developer.apple.com/documentation/swiftui/" target="_blank" rel="noopener">Apple Developer SwiftUI</a></p>
<p><img src="https://i.loli.net/2019/11/27/iM8IsLBGhWgzvTX.png" alt="SwiftUI通用开发"></p>
<h3 id="一、SwiftUI是什么？"><a href="#一、SwiftUI是什么？" class="headerlink" title="一、SwiftUI是什么？"></a>一、SwiftUI是什么？</h3><h5 id="1-定义："><a href="#1-定义：" class="headerlink" title="1. 定义："></a>1. 定义：</h5><p><code>SwiftUI</code>是苹果在 <strong>“WWDC-2019”</strong> 推出的一款全新的 <strong>“声明式UI”</strong> 框架。 拆开看，<code>Swift</code> + <code>UI</code>，即基于Swift语言基础语法的UI框架</p>
<h5 id="2-特点："><a href="#2-特点：" class="headerlink" title="2. 特点："></a>2. 特点：</h5><ul>
<li><strong>“简洁迅速”的Swift</strong>：越来越简洁的<code>Swift</code>语法，配上<code>Swift</code>迅速的优势</li>
<li><strong>“即视”的UI</strong>：降低调试成本，一边写<code>code</code>、一边就可实时预览查看<code>UI</code>界面</li>
<li><strong>跨平台</strong>：一套代码，即可完成<code>iOS</code>、<code>iPadOS</code>、<code>macOS</code>、<code>watchOS</code>的开发与适配</li>
</ul>
<p><img src="https://i.loli.net/2019/11/24/I8Aq2jNUtpgQ5Ke.png" alt="跨平台"></p>
<ul>
<li><strong>“声明式”编程</strong>：</li>
</ul>
<p>对比之前的 <strong>“指令式”编程</strong>，我们通常需要告诉计算机<strong>“怎么做”</strong>？ 而<strong>“声明式”编程</strong>是让我们告诉计算机 <strong>“做什么”</strong>？（至于最底层怎么做，开发者无需关心）</p>
<p>举个例子，对于写UI而言，</p>
<ul>
<li>指令式编程：就是，<strong>怎么画？</strong> 把每个<code>frame</code>、<code>layout</code>等等统统需要计算到位</li>
<li>声明式编程：就是，<strong>画什么？</strong> 把想要的效果描述出来，其他都交给框架去做</li>
</ul>
<h5 id="3-开发环境："><a href="#3-开发环境：" class="headerlink" title="3. 开发环境："></a>3. 开发环境：</h5><p>这么新的技术肯定需要环境的支持。<code>SwiftUI</code>所需要的开发环境，如下：</p>
<ul>
<li>Xcode：<code>Xcode 11.1+</code></li>
<li>MacOS：<code>MacOS 10.15+</code></li>
<li>iOS：<code>iOS 13+</code></li>
</ul>
<blockquote>
<p><em>PS：由于<code>SwiftUI</code>只能应用与<code>iOS 13</code>系统以上的设备。 因此，这项技术不建议用在需要适配低版本（<code>iOS 13</code> 以下）的App上。 不过如果是无需适配低版本的新项目，或者学习者全可以上手“玩一玩”。 毕竟苹果的新技术还是很有意思的嘛~</em></p>
</blockquote>
<h3 id="二、SwiftUI的基本组件（语法）"><a href="#二、SwiftUI的基本组件（语法）" class="headerlink" title="二、SwiftUI的基本组件（语法）"></a>二、SwiftUI的基本组件（语法）</h3><blockquote>
<p>这块知识比较“基础”且“重要”。只有记住了这些基本组件，才能用较少的代码开发出精美的App</p>
</blockquote>
<p>下面是一些重要的<code>SwiftUI</code>组件：</p>
<p><strong>组件介绍</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Text</td>
<td>用来显示文本的组件，类似UIKit中的<code>UILabel</code></td>
</tr>
<tr>
<td>Image</td>
<td>用来展示图片的组件，类似UIKit中的<code>UIImageView</code></td>
</tr>
<tr>
<td>Button</td>
<td>用于可点击的按钮组件，类似UIKit中的<code>UIButton</code></td>
</tr>
<tr>
<td>List</td>
<td>用来展示列表的组件，类似UIKit中的<code>UITableView</code></td>
</tr>
<tr>
<td>ScrollView</td>
<td>用来支持滑动的组件，类似UIKit中的<code>UIScrollView</code></td>
</tr>
<tr>
<td>Spacer</td>
<td>一个灵活的空间，用来填充空白的组件</td>
</tr>
<tr>
<td>Divider</td>
<td>一条分割线，用来划分区域的组件</td>
</tr>
<tr>
<td>VStack</td>
<td>将子视图按<strong>“竖直方向”</strong>排列布局。（<code>Vertical stack</code>）</td>
</tr>
<tr>
<td>HStack</td>
<td>将子视图按<strong>“水平方向”</strong>排列布局。（<code>Horizontal stack</code>）</td>
</tr>
<tr>
<td>ZStack</td>
<td>将子视图按<strong>“两轴方向均对齐”</strong>布局（居中，有重叠效果）</td>
</tr>
</tbody></table>
<p><strong>基本组件</strong></p>
<ul>
<li>Text：用来显示文本的组件，类似UIKit中的<code>UILabel</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">"Hello, we are QiShare!"</span>).foregroundColor(.blue).font(.system(size: <span class="number">32.0</span>))</span></pre></td></tr></table></figure>

<ul>
<li>Image：用来展示图片的组件，类似UIKit中的<code>UIImageView</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Image</span>.<span class="keyword">init</span>(systemName: <span class="string">"star.fill"</span>).foregroundColor(.yellow)</span></pre></td></tr></table></figure>

<ul>
<li>Button：用于可点击的按钮组件，类似UIKit中的<code>UIButton</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span>(action: &#123; <span class="keyword">self</span>.showingProfile.toggle() &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="type">Image</span>(systemName: <span class="string">"paperplane.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .imageScale(.large)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .accessibility(label: <span class="type">Text</span>(<span class="string">"Right"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .padding()</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>List：用来展示列表的组件，类似UIKit中的<code>UITableView</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">0</span>..&lt;<span class="number">5</span>)&#123;<span class="number">_</span> <span class="keyword">in</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">NavigationLink</span>.<span class="keyword">init</span>(destination: <span class="type">VStack</span>(alignment:.center)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>.<span class="keyword">init</span>(systemName: <span class="string">"\(item+1).square.fill"</span>).foregroundColor(.green)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"详情界面\(item + 1)"</span>).font(.system(size: <span class="number">16</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">//ListRow</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr></table></figure>

<ul>
<li>ScrollView：用来支持滑动的组件，类似UIKit中的<code>UIScrollView</code></li>
<li>Spacer：一个灵活的空间，用来填充空白的组件</li>
<li>Divider：一条分割线，用来划分区域的组件</li>
</ul>
<p><strong>布局组件</strong></p>
<ul>
<li>VStack：将子视图按<strong>“Y轴竖直方向”</strong>布局（Vertical stack）</li>
<li>HStack：将子视图按<strong>“X轴水平方向”</strong>布局（Horizontal stack）</li>
<li>ZStack：将子视图按<strong>“XY两轴方向均对齐”</strong>布局</li>
</ul>
<p><strong>功能组件</strong></p>
<ul>
<li>NavigationView：负责App中导航功能的组件，类似UIKit中的<code>UINavigationView</code></li>
<li>NavigationLink：负责App页面跳转的组件，类似于<code>UINavigationView</code>中的<code>push</code>与<code>pop</code>功能</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">NavigationView</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="type">List</span>(<span class="number">0</span>..&lt;<span class="number">5</span>)&#123;<span class="number">_</span> <span class="keyword">in</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">NavigationLink</span>.<span class="keyword">init</span>(destination: <span class="type">VStack</span>(alignment:.center)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>.<span class="keyword">init</span>(systemName: <span class="string">"\(item+1).square.fill"</span>).foregroundColor(.green)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"详情界面\(item + 1)"</span>).font(.system(size: <span class="number">16</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="comment">//ListRow</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">.navigationBarTitle(<span class="string">"导航\(item)"</span>,displayMode: .inline)</span></pre></td></tr></table></figure>

<ul>
<li>TabView：负责App中的标签页功能的组件，类似UIKit中的<code>UITabBarController</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">TabView</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="type">Text</span>(<span class="string">"The First Tab"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .tabItem &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"1.square.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"First"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="type">Text</span>(<span class="string">"Another Tab"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .tabItem &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"2.square.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"Second"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="type">Text</span>(<span class="string">"The Last Tab"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .tabItem &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"3.square.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"Third"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">.font(.headline)</span></pre></td></tr></table></figure>

<h3 id="三、SwiftUI快速上手实践"><a href="#三、SwiftUI快速上手实践" class="headerlink" title="三、SwiftUI快速上手实践"></a>三、SwiftUI快速上手实践</h3><p>下面来快速实现一个有TabView、NavigationView、List的简单示例Demo</p>
<p><img src="https://i.loli.net/2019/11/24/1npsrk8Q7tZWgEM.png" alt="实时预览"></p>
<p><code>SF Symbols</code> 是从 <code>iOS 13</code> 和 <code>macOS 10.15</code> 开始内置于系统中的字符图标库，它提供了上千种常见的线条图标，而且我们可以任意地为它们设置尺寸，颜色等属性。Apple 甚至准备了专门的app：<a href="https://developer.apple.com/design/resources/" target="_blank" rel="noopener">SF Symbols</a> 来帮助你查看可用的符号：</p>
<p>接下来就让我们用这些<code>Symbols</code>制作个小Demo</p>
<ul>
<li>ContentView.swift：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ContentView</span>: <span class="title">View</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> isLeftNav = <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @<span class="type">State</span> <span class="keyword">var</span> isRightNav = <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">init</span>() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//修改导航栏文字颜色</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">UINavigationBar</span>.appearance().largeTitleTextAttributes = [.foregroundColor: <span class="type">UIColor</span>.systemBlue]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">UINavigationBar</span>.appearance().titleTextAttributes = [.foregroundColor: <span class="type">UIColor</span>.systemBlue]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">UINavigationBar</span>.appearance().tintColor = .systemBlue</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">TabView</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// Tab1:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">NavigationView</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">List</span>(<span class="type">Symbols</span>, id:\.<span class="keyword">self</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">ListRow</span>(symbol: $<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .navigationBarTitle(<span class="type">Text</span>(<span class="string">"SF Symbols"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .navigationBarItems(leading: leftNavButton, trailing: rightNavButton)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;.tabItem &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Image</span>.<span class="keyword">init</span>(systemName: <span class="string">"star.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(<span class="string">"Tab1"</span>).font(.subheadline)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// Tab2:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">NavigationView</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(<span class="string">"This is the second tab."</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;.tabItem &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Image</span>.<span class="keyword">init</span>(systemName: <span class="string">"star.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(<span class="string">"Tab2"</span>).font(.subheadline)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> leftNavButton: some <span class="type">View</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">Button</span>(action: &#123; <span class="keyword">self</span>.isLeftNav.toggle() &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"person.crop.circle"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .imageScale(.large)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .accessibility(label: <span class="type">Text</span>(<span class="string">"Left"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .padding()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .sheet(isPresented: $isLeftNav) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">VStack</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(<span class="string">"Hello, we are QiShare!"</span>).foregroundColor(.blue).font(.system(size: <span class="number">32.0</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">HStack</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Text</span>(<span class="string">"an iOS Team. "</span>).fontWeight(.black).foregroundColor(.purple)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Text</span>(<span class="string">"We are learning SwiftUI."</span>).foregroundColor(.blue)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> rightNavButton: some <span class="type">View</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">Button</span>(action: &#123; <span class="keyword">self</span>.isRightNav.toggle() &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: <span class="string">"paperplane.fill"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .imageScale(.large)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .accessibility(label: <span class="type">Text</span>(<span class="string">"Right"</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .padding()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .sheet(isPresented: $isRightNav, onDismiss: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">print</span>(<span class="string">"dissmiss RrightNav"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">ZStack</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(<span class="string">"This is the Right Navi Button."</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ListRow.swift：List对应的Cell</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListRow</span>: <span class="title">View</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> symbol: <span class="type">String</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">NavigationLink</span>(destination: <span class="type">ListDetail</span>(symbol: symbol)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">HStack</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//图片</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Image</span>(systemName: symbol)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    .resizable()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    .frame(width: <span class="number">60</span>, height: <span class="number">60</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    .foregroundColor(<span class="type">Colors</span>.randomElement())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//分割</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Divider</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//文字</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Text</span>(symbol)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>ListDetail.swift：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListDetail</span>: <span class="title">View</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> symbol: <span class="type">String</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> body: some <span class="type">View</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="type">VStack</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"Image:"</span>).font(.headline)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Image</span>(systemName: symbol)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .foregroundColor(<span class="type">Colors</span>.randomElement())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .imageScale(.large)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .scaleEffect(<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .padding(.bottom, <span class="number">100</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Divider</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(<span class="string">"Image Name:"</span>).font(.headline)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Text</span>(symbol)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                .font(.largeTitle)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="type">Spacer</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .navigationBarTitle(symbol)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>SwiftUI</category>
      </categories>
      <tags>
        <tag>SwiftUI</tag>
      </tags>
  </entry>
  <entry>
    <title>如何封装Framework静态库</title>
    <url>/2019/10/13/%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%20Framework%20%E9%9D%99%E6%80%81%E5%BA%93/</url>
    <content><![CDATA[<p>工作中使用的第三方SDK基本上都是闭源的，因为公司不能把自己的机密泄露出去。所以当需要给别人提供SDK但不让他们知道代码的实现时就需要封装成静态库</p>
<p>静态库有<code>.a</code>库和<code>.framework</code>库，苹果官方更建议我们使用<code>.framework</code>库，因为其更加强大</p>
<blockquote>
<p>.a是一个纯二进制文件，.framework中除了有二进制文件之外还有资源文件<br>.a文件不能直接使用，至少要有.h文件配合，.framework文件可以直接使用<br>.a + .h + sourceFile = .framework</p>
</blockquote>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>参考这篇博客： <a href="http://www.cocoachina.com/articles/11022" target="_blank" rel="noopener">iOS开发——创建你自己的Framework</a> 讲解的非常详细</p>
<p>总结一下步骤：</p>
<ol>
<li>创建工程，最好是起名为xxxDemo例如AXKitDemo，然后新建一个target名为AXKit，并把原来的工程改名为AXKit（为了方便在demo中调试静态库）</li>
<li>新建一个target，选择类型为framework</li>
<li>在framework中创建需要封装的类，写好代码</li>
<li>在<code>Build Setting</code>里更改参数，<code>Math-O Type</code>为<code>Static Library</code></li>
<li>在<code>Build Phases -&gt; Headers</code>里将需要暴露出来的头文件从<code>Project</code>移动到<code>Public</code></li>
<li>添加一个<code>Aggregate</code>的target，并添加运行脚本。目的是把编译出来的真机版和模拟器版的framework合并</li>
<li>模拟器编译一下，真机编译一下，然后<code>Aggregate</code>编译一下，然后在项目的<code>Products</code>文件夹里就有了最终生成的静态库</li>
</ol>
<p><code>Aggregate</code>的Run Script脚本：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"$&#123;ACTION&#125;"</span> = <span class="string">"build"</span> ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">then</span></pre></td></tr><tr><td class="code"><pre><span class="line">INSTALL_DIR=$&#123;SRCROOT&#125;/Products/$&#123;PROJECT_NAME&#125;.framework</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">DEVICE_DIR=$&#123;BUILD_ROOT&#125;/$&#123;CONFIGURATION&#125;-iphoneos/$&#123;PROJECT_NAME&#125;.framework</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">SIMULATOR_DIR=$&#123;BUILD_ROOT&#125;/$&#123;CONFIGURATION&#125;-iphonesimulator/$&#123;PROJECT_NAME&#125;.framework</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d <span class="string">"$&#123;INSTALL_DIR&#125;"</span> ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">then</span></pre></td></tr><tr><td class="code"><pre><span class="line">rm -rf <span class="string">"$&#123;INSTALL_DIR&#125;"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">mkdir -p <span class="string">"$&#123;INSTALL_DIR&#125;"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">cp -R <span class="string">"$&#123;DEVICE_DIR&#125;/"</span> <span class="string">"$&#123;INSTALL_DIR&#125;/"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">#ditto "$&#123;DEVICE_DIR&#125;/Headers" "$&#123;INSTALL_DIR&#125;/Headers"</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">lipo -create <span class="string">"$&#123;DEVICE_DIR&#125;/$&#123;PROJECT_NAME&#125;"</span> <span class="string">"$&#123;SIMULATOR_DIR&#125;/$&#123;PROJECT_NAME&#125;"</span> -output <span class="string">"$&#123;INSTALL_DIR&#125;/$&#123;PROJECT_NAME&#125;"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#open "$&#123;DEVICE_DIR&#125;"</span></pre></td></tr><tr><td class="code"><pre><span class="line">#open "$&#123;SRCROOT&#125;/Products"</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Framework静态库</category>
      </categories>
      <tags>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS开发主要概念总结</title>
    <url>/2019/08/24/iOS%E5%BC%80%E5%8F%91%E4%B8%BB%E8%A6%81%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="一、用什么架构、有什么区别？（MVC、MVVM）"><a href="#一、用什么架构、有什么区别？（MVC、MVVM）" class="headerlink" title="一、用什么架构、有什么区别？（MVC、MVVM）"></a>一、用什么架构、有什么区别？（MVC、MVVM）</h3><p><strong>1.MVC，即Model-View-Controller</strong></p>
<blockquote>
<p>它是苹果公司官方推荐的App开发架构，也是一般开发者最先遇到，最经典的架构。<br>它把整个App分为三个部分：<strong>Model负责处理数据</strong>；<strong>View负责处理UI</strong>；<strong>Controller是View和Model的桥梁</strong>，它将数据从Model层传送到View层并展示出来，同时将View层的交互传到Model层以改变数据。<br>它是应用的一种基本架构，主要目的是将不同的代码归并为不同的模块，做到低耦合、代码分配合理、易于扩展维护。</p>
</blockquote>
<p><strong>2.MVVM，MVVM衍生于MVC，是对 MVC 的一种演进，它促进了 UI 代码与业务逻辑的分离</strong></p>
<blockquote>
<p>在MVVM 中，view 和 view controller正式联系在一起，我们把它们视为一个组件。<br>view 和 view controller 都不能直接引用model，而是引用视图模型（viewModel）。<br>viewModel 是一个放置用户输入验证逻辑，视图显示逻辑，发起网络请求和其他代码的地方。<br>使用MVVM会轻微的增加代码量，但总体上减少了代码的复杂性。</p>
</blockquote>
<p><strong>3.MVVM是MVC的升级版，完全兼容当前的MVC架构</strong></p>
<blockquote>
<p>MVVM虽然促进了UI 代码与业务逻辑的分离，一定程度上减轻了ViewController的臃肿度，但是View和ViewModel之间的数据绑定使得 MVVM变得复杂和难用了，如果我们不能更好的驾驭两者之间的数据绑定，同样会造成Controller 代码过于复杂，代码逻辑不易维护的问题。</p>
</blockquote>
<h3 id="二、解释一下多线程"><a href="#二、解释一下多线程" class="headerlink" title="二、解释一下多线程"></a>二、解释一下多线程</h3><p><strong>1.OC中多线程根据封装程度可以分为三个层次：<code>NSThread</code>、<code>GCD和NSOperation</code></strong></p>
<p><strong>2.<code>NSThread</code>，<code>NSThread</code>是封装程度最小最轻量级的，使用更灵活，但要手动管理线程的生命周期、线程同步和线程加锁等，开销较大</strong></p>
<p><strong>3.GCD(Grand Central Dispatch)，又叫大中央调度，是 Apple 开发的一个多核编程的较新的解决方法</strong></p>
<blockquote>
<p>它主要用于优化应用程序以支持多核处理器以及其他对称多处理系统。提供了简洁的C语言接口，使用更加简单高效，也是苹果推荐的方式<br>可以自动管理线程的生命周期（创建线程、调度任务、销毁线程）<br>可用于多核的并行运算<br>会自动利用更多的 CPU 内核（比如双核、四核）<br>只需要告诉 GCD 想要执行什么任务，不需要编写任何线程管理代码<br>主要是一些同步执行、异步执行、串行队列、并行队列<br>将”任务”(block)添加到 队列(串行/并发/主队列/全局队列]),并且指定执行任务的函数(同步/异步)<br>一次执行<br>延迟执行</p>
</blockquote>
<p><strong>4.NSOperation，NSOperation是一个抽象类，不能直接使用，其目的就是为了定义子类共有的方法和属性</strong></p>
<blockquote>
<p><strong>NSOperation、NSOperationQueue</strong> 是基于 GCD 更高一层的封装，完全面向对象。但是比 GCD 更简单易用、代码可读性也更高<br><strong>其子类有两个：NSInvocationOperation、NSBlockOperation</strong><br>本质上就是GCD的并发队列，就是异步执行任务</p>
</blockquote>
<h3 id="三、RunTime"><a href="#三、RunTime" class="headerlink" title="三、RunTime"></a>三、RunTime</h3><p><strong>1.Runtime是属于Object-C的底层，是一套比较底层的纯C语言API，属于C语言库</strong></p>
<p><strong>2.在我们平时编写的Object-C代码中, 程序运行过程时, 其实最终都是转成了Runtime的C语言代码, Runtime算是Object-C的幕后工作者</strong></p>
<p><strong>3.静态语言：</strong></p>
<blockquote>
<p>如C语言，编译阶段就要决定调用哪个函数，如果函数未实现就会编译报错</p>
</blockquote>
<p><strong>动态语言：</strong></p>
<blockquote>
<p>如OC语言，编译阶段并不能决定真正调用哪个函数，只要函数声明过即使没有实现也不会报错。<br>OC是一门动态语言，就是因为它总是把一些决定性的工作从编译阶段推迟到运行时阶段。<br>OC代码的运行不仅需要编译器，还需要运行时系统(Runtime Sytem)来执行编译后的代码。</p>
</blockquote>
<p><strong>4.Runtime 实际上是一个库，这个库使我们可以在程序运行时动态的创建对象、检查对象，修改类和对象的方法</strong></p>
<p><strong>5.消息（方法）传递、消息转发</strong></p>
<p><strong>6.关联对象(Objective-C Associated Objects)给分类增加属性</strong></p>
<p><strong>7.魔法(Method Swizzling)方法添加和替换</strong></p>
<blockquote>
<p>在 Objective-C 的运行时中，每个类有两个方法都会自动调用。+load 是在一个类被初始装载时调用，+initialize 是在应用第一次调用该类的类方法或实例方法前调用的。两个方法都是可选的，并且只有在方法被实现的情况下才会被调用。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@implementation ViewController</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">+ (void)load &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    static dispatch_once_t onceToken;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Class class &#x3D; [self class];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SEL originalSelector &#x3D; @selector(viewDidLoad);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SEL swizzledSelector &#x3D; @selector(jkviewDidLoad);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        Method originalMethod &#x3D; class_getInstanceMethod(class,originalSelector);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Method swizzledMethod &#x3D; class_getInstanceMethod(class,swizzledSelector);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F;judge the method named  swizzledMethod is already existed.</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BOOL didAddMethod &#x3D; class_addMethod(class, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; if swizzledMethod is already existed.</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (didAddMethod) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            class_replaceMethod(class, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- (void)jkviewDidLoad &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;替换的方法&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    [self jkviewDidLoad];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NSLog(@&quot;自带的方法&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    [super viewDidLoad];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@end</span></pre></td></tr></table></figure>

<p><strong>8.KVO的实现</strong></p>
<blockquote>
<p>全称是Key-value observing，翻译成键值观察。提供了一种当其它对象属性被修改的时候能通知当前对象的机制。</p>
</blockquote>
<p><strong>9.实现字典和模型的自动转换(MJExtension)</strong></p>
<blockquote>
<p>原理描述：用runtime提供的函数遍历Model自身所有属性，如果属性在json中有对应的值，则将其赋值。<br>核心方法：在NSObject的分类中添加方法。</p>
</blockquote>
<p><strong>10.实现NSCoding的自动归档和自动解档</strong></p>
<blockquote>
<p>原理描述：用runtime提供的函数遍历Model自身所有属性，并对属性进行encode和decode操作。<br>核心方法：在Model的基类中重写方法。</p>
</blockquote>
<h3 id="四-RunLoop"><a href="#四-RunLoop" class="headerlink" title="四.RunLoop"></a>四.RunLoop</h3><p><strong>1.RunLoop</strong></p>
<blockquote>
<p>RunLoop是多线程的法宝，即一个线程一次只能执行一个任务，执行完任务后就会退出线程。主线程执行完即时任务时会继续等待接收事件而不退出。非主线程通常来说就是为了执行某一任务的，执行完毕就需要归还资源，因此默认是不运行RunLoop的；</p>
</blockquote>
<p><strong>2.每一个线程都有其对应的RunLoop，只是默认只有主线程的RunLoop是启动的，其它子线程的RunLoop默认是不启动的，若要启动则需要手动启动</strong></p>
<p><strong>3.在一个单独的线程中，如果需要在处理完某个任务后不退出，继续等待接收事件，则需要启用RunLoop</strong></p>
<p><strong>4.NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，则需要设置Mode为Common模式</strong></p>
<p><strong>5.保证线程的长时间存活</strong></p>
<p><strong>6.保证NSTimer在视图滑动时，依然能正常运转</strong></p>
<h3 id="五-常用的设计模式"><a href="#五-常用的设计模式" class="headerlink" title="五.常用的设计模式"></a>五.常用的设计模式</h3><p><strong>1.单例模式（Singleton）:</strong></p>
<blockquote>
<p>此模式保证对于一个特有的类，只有一个公共的实例存在。它一般与懒加载一起出现，只有被需要时才会创建。单例模式的例子有UserDefaults、UIApplication、UIScreen；</p>
</blockquote>
<p><strong>2.观察者模式（Observer）:</strong></p>
<blockquote>
<p>它定义对象之间的一种一对多的依赖关系，每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。在iOS中的典型实现是NotificationCenter和KVO；<br>KVO,Key-Value Observer,即键值观察。它是一种没有通知中心的观察者模式的实现方式。一个主体对象管理所有依赖于它的观察者对象，并且在自身状态发生改变时主动通知观察者对象。<br>它的具体实现步骤如下。<br>（1）注册观察者<br>（2）更改主题对象属性的值，即触发发送更改的通知。<br>（3）在制定的回调函数中，处理收到的更改通知。</p>
</blockquote>
<h3 id="六-项目的优化"><a href="#六-项目的优化" class="headerlink" title="六.项目的优化"></a>六.项目的优化</h3><p><strong>快：</strong>使用时避免出现卡顿，响应速度快，减少用户等待的时间，满足用户期望。<br><strong>稳：</strong>不要在用户使用过程中崩溃和无响应。<br><strong>省：</strong>节省流量和耗电，减少用户使用成本，避免使用时导致手机发烫。<br><strong>小：</strong>安装包小可以降低用户的安装成本。</p>
<p><strong>1.重用问题：</strong></p>
<blockquote>
<p>如UITableViewCells、UICollectionViewCells、UITableViewHeaderFooterViews设置正确的reuseIdentifier，充分重用；<br>尽量把views设置为不透明：当opque为NO的时候，图层的半透明取决于图片和其本身合成的图层为结果，可提高性能；</p>
</blockquote>
<p><strong>2.不要使用太复杂的XIB/Storyboard：</strong></p>
<blockquote>
<p>载入时就会将XIB/storyboard需要的所有资源，包括图片全部载入内存，即使未来很久才会使用。那些相比纯代码写的延迟加载，性能及内存就差了很多；</p>
</blockquote>
<p><strong>3.选择正确的数据结构：</strong></p>
<blockquote>
<p>学会选择对业务场景最合适的数组结构是写出高效代码的基础。比如，数组: 有序的一组值。使用索引来查询很快，使用值查询很慢，插入/删除很慢。字典: 存储键值对，用键来查找比较快。集合: 无序的一组值，用值来查找很快，插入/删除很快。</p>
</blockquote>
<p><strong>4.延迟加载：</strong></p>
<blockquote>
<p>对于不应该使用的数据，使用延迟加载方式。对于不需要马上显示的视图，使用延迟加载方式。比如，网络请求失败时显示的提示界面，可能一直都不会使用到，因此应该使用延迟加载。</p>
</blockquote>
<p><strong>5.数据缓存：</strong></p>
<blockquote>
<p>对于cell的行高要缓存起来，使得reload数据时，效率也极高。而对于那些网络数据，不需要每次都请求的，应该缓存起来，可以写入数据库，也可以通过plist文件存储，例如个人信息的一些数据，也许会有好几个页面会用到，那么就把数据存入本地，使用的时候根据需要可以直接从本地进行加载。</p>
</blockquote>
<p><strong>6.不要阻塞主线程，主线程主要做以下几个方面工作：</strong></p>
<blockquote>
<p>UI 生命周期控制、系统事件处理、消息处理、界面布局、界面绘制、界面刷新，除此之外，应该尽量避免将其他处理放在主线程中，特别复杂的数据计算和网络请求等。</p>
</blockquote>
<p><strong>7.处理内存警告</strong></p>
<blockquote>
<p>在app delegate中使用<code>applicationDidReceiveMemoryWarning</code>的方法;<br>注册并接收 <code>UIApplicationDidReceiveMemoryWarningNotification</code>的通知;</p>
</blockquote>
<p><strong>8.选择正确的数据存储选项</strong></p>
<p><strong>9.重用和延迟加载(lazy load) Views</strong></p>
<blockquote>
<p>更多的view意味着更多的渲染，也就是更多的CPU和内存消耗。<br>不要一次创建所有的subview，而是当需要时才创建。</p>
</blockquote>
<p><strong>10.尽量把views设置为透明</strong></p>
<blockquote>
<p>如果你有透明的Views你应该设置它们的opaque属性为YES。<br>原因是这会使系统用一个最优的方式渲染这些views。<br>在相对比较静止的画面中，设置这个属性不会有太大影响。然而当这个view嵌在scroll view里边，或者是一个复杂动画的一部分，不设置这个属性的话会在很大程度上影响app的性能。</p>
</blockquote>
<h3 id="七、KVC、KVO"><a href="#七、KVC、KVO" class="headerlink" title="七、KVC、KVO"></a>七、KVC、KVO</h3><p><strong>1.键值编码是一种间接访问对象的属性使用字符串来标识属性，而不是通过调用存取方法，直接或通过实例变量访问的机制，非对象类型的变量将被自动封装或者解封成对象，很多情况下会简化程序代码</strong></p>
<p><strong>2.KVC的缺点：</strong></p>
<blockquote>
<p>一旦使用 KVC 你的编译器无法检查出错误,即不会对设置的键、键路径进行错误检查,且执行效率要低于合成存取器方法和自定的 setter 和 getter 方法。因为使用 KVC 键值编码,它必须先解析字符串,然后在设置或者访问对象的实例变量。</p>
</blockquote>
<p><strong>3.键值观察机制是一种能使得对象获取到其他对象属性变化的通知 ，极大的简化了代码</strong></p>
<p><strong>4.实现 KVO 键值观察模式,被观察的对象必须使用 KVC 键值编码来修 改它的实例变量,这样才能被观察者观察到</strong></p>
<p>因此，KVC是KVO的基础。</p>
<p><strong>5.注册观察者(注意：观察者和被观察者不会被保留也不会被释放)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath </span></pre></td></tr><tr><td class="code"><pre><span class="line">options:(NSKeyValueObservingOptions)options </span></pre></td></tr><tr><td class="code"><pre><span class="line">context:(void *)context;</span></pre></td></tr></table></figure>

<p><strong>6.接收变更通知</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)observeValueForKeyPath:(NSString *)keyPath</span></pre></td></tr><tr><td class="code"><pre><span class="line">ofObject:(id)object change:(NSDictionary *)change context:(void *)context;</span></pre></td></tr></table></figure>

<p><strong>7.移除对象的观察者身份</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)removeObserver:(NSObject *)observer</span></pre></td></tr><tr><td class="code"><pre><span class="line">forKeyPath:(NSString *)keyPath;</span></pre></td></tr></table></figure>

<p><strong>8.KVO中谁要监听谁注册，然后对响应进行处理，使得观察者与被观察者完全解耦。KVO只检测类中的属性，并且属性名都是通过NSString来查找，编译器不会检错和补全，全部取决于自己</strong></p>
<h3 id="八、Block、通知、代理"><a href="#八、Block、通知、代理" class="headerlink" title="八、Block、通知、代理"></a>八、Block、通知、代理</h3><p><strong>1.代理</strong></p>
<blockquote>
<p>是一种回调机制，且是一对一的关系，Delegate需要定义协议方法，代理对象实现协议方法，并且需要建立代理关系才可以实现通信；</p>
</blockquote>
<p><strong>2.通知</strong></p>
<blockquote>
<p>是一对多的关系，一个对向所有的观察者提供变更通知；</p>
</blockquote>
<p><strong>3.效率：</strong></p>
<blockquote>
<p>Delegate比NSNOtification高；</p>
</blockquote>
<p><strong>4.Block</strong></p>
<blockquote>
<p>一般是一对一的通信；</p>
</blockquote>
<blockquote>
<p>Block更加简洁，不需要定义繁琐的协议方法，但通信事件比较多的话，建议使用Delegate；</p>
</blockquote>
<h3 id="九、AFNetWorking底层原理"><a href="#九、AFNetWorking底层原理" class="headerlink" title="九、AFNetWorking底层原理"></a>九、AFNetWorking底层原理</h3><p><strong>1.AFHTTPRequestOperationManager：</strong></p>
<blockquote>
<p>内部封装的是 NSURLConnection, 负责发送网络请求, 使用最多的一个类。(3.0废弃)</p>
</blockquote>
<p><strong>2.AFHTTPSessionManager：</strong></p>
<blockquote>
<p>内部封装是 NSURLSession, 负责发送网络请求,使用最多的一个类。</p>
</blockquote>
<p><strong>2.AFNetworkReachabilityManager：</strong></p>
<blockquote>
<p>实时监测网络状态的工具类。当前的网络环境发生改变之后,这个工具类就可以检测到。</p>
</blockquote>
<p><strong>3. AFSecurityPolicy：</strong></p>
<blockquote>
<p>网络安全的工具类, 主要是针对 HTTPS 服务</p>
</blockquote>
<p><strong>4.AFURLRequestSerialization：</strong></p>
<blockquote>
<p>序列化工具类,基类。上传的数据转换成JSON格式(AFJSONRequestSerializer).使用不多。</p>
</blockquote>
<p><strong>6). AFURLResponseSerialization：</strong></p>
<blockquote>
<p>反序列化工具类;基类.使用比较多。</p>
</blockquote>
<p><strong>7.AFJSONResponseSerializer:</strong></p>
<blockquote>
<p>JSON解析器,默认的解析器。</p>
</blockquote>
<p><strong>8.AFHTTPResponseSerializer:</strong></p>
<blockquote>
<p>万能解析器; JSON和XML之外的数据类型,直接返回二进制数据.对服务器返回的数据不做任何处理。</p>
</blockquote>
<p><strong>9.AFXMLParserResponseSerializer:</strong></p>
<blockquote>
<p>XML解析器;</p>
</blockquote>
<h3 id="10-Scoket连接和HTTP连接的区别"><a href="#10-Scoket连接和HTTP连接的区别" class="headerlink" title="10.Scoket连接和HTTP连接的区别"></a>10.Scoket连接和HTTP连接的区别</h3><p><strong>1.HTTP连接：</strong></p>
<blockquote>
<p>短连接，客户端向服务器发送一次请求，服务器响应后连接断开，节省资源。服务器不能主动给客户端响应（除非采用HTTP长连接技术），iPhone主要使用类NSURLConnection</p>
</blockquote>
<p><strong>2.Socket连接：</strong></p>
<blockquote>
<p>长连接，客户端跟服务器端直接使用Socket进行连接，没有规定连接后断开，因此客户端和服务器段保持连接通道，双方可以主动发送数据，一般多用于游戏Socket默认连接超时时间是30秒，默认大小是8K（理解为一个数据包大小）</p>
</blockquote>
<h3 id="十一、isa指针"><a href="#十一、isa指针" class="headerlink" title="十一、isa指针"></a>十一、isa指针</h3><p><strong>1.在 ios 开发中，类也是一个对象，我们称之为类对象， 所有对象中，包含实例对象和类对象，都含有一个isa 指针</strong></p>
<blockquote>
<p>实例对象的isa指针， 指向他的类对象，类对象的isa 指针， 指向他的元类。</p>
</blockquote>
<p><strong>2.系统判断一个对象属于哪个类，也是通过这个对象的isa指针的指向来判断</strong></p>
<p><strong>3.对象中的成员变量，存储在对象本身，对象的实例方法，存储在他的isa 指针所指向的对象中</strong></p>
<blockquote>
<p>即：减号方法存储在类对象中，类方法存储在类对象isa所指向的元类中，成员变量的值储存在对象中。</p>
</blockquote>
<p><strong>4.对象在调用减号方法的时候，系统会在对象的isa指针所指向的类对象中寻找方法，这一段在kvo的实现原理中就能看到，kvo的实现原理就是系统动态的生成一个类对象，这个类是监听对象的类的子类，在生成的类中重写了监听属性的set方法，实现对set方法的监听，之后将监听对象的isa指针指向系统动态生成的这个类，当监听对象调用set方法时，由于监听对象的isa指针指向的是刚刚动态生成的类，所以在其中找的的set方法也是重写过有监听功能的set方法，这就是kvo的实现原理。同理，我们也可以通过rutime中的方法设置某个对象isa指针指向的类对象，让对象调用一些原本不属于他的方法</strong></p>
<h3 id="十二、H5、CSS、JavaScript"><a href="#十二、H5、CSS、JavaScript" class="headerlink" title="十二、H5、CSS、JavaScript"></a>十二、H5、CSS、JavaScript</h3><h3 id="十三、WebView，JS和原生的交互"><a href="#十三、WebView，JS和原生的交互" class="headerlink" title="十三、WebView，JS和原生的交互"></a>十三、WebView，JS和原生的交互</h3><p>iOS8.0之后，苹果推荐使用WebKit框架中的WKWebView来加载网页，使用WKWebViewConfiguration来配置JS交互。<br><strong>网页切换</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[_webView goBack];    &#x2F;&#x2F;页面后退</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[_webView goForward];    &#x2F;&#x2F;页面前进</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[_webView reload];    &#x2F;&#x2F;刷新当前页面</span></pre></td></tr></table></figure>

<p><strong>JavaSript调用OC</strong></p>
<blockquote>
<p>主要依靠WKScriptMessageHandler协议类、WKUserContentController其中:<br>WKUserContentController对象负责注册JS方法，设置处理接收JS方法的代理，代理遵守WKScriptMessageHandler，实现捕捉到JS消息的回调方法。</p>
</blockquote>
<p><strong>1、配置与JavaScript的交互</strong></p>
<blockquote>
<p>用WKWebViewConfiguration来配置JS交互</p>
</blockquote>
<p><strong>2、使用WKUserContentController，用来做 原生与JavaScript的交互管理</strong></p>
<p><strong>3、使用协议类WKScriptMessageHandler，用来处理监听JavaScript方法从而调用原生OC方法。（和WKUserContentController搭配使用）</strong></p>
<p><strong>4、通过 接收JS传出消息的name 进行捕捉的回调方法</strong></p>
<blockquote>
<p>ps：遵守WKScriptMessageHandler协议，代理是由WKUserContentControl设置</p>
</blockquote>
<p><strong>OC调用JavaSript</strong></p>
<blockquote>
<p>使用WKUserScript，执行自定义的JavaScript代码</p>
</blockquote>
<p><strong>WKWebView涉及的代理方法</strong></p>
<p><strong>WKNavigationDelegate协议</strong></p>
<blockquote>
<p>主要处理一些跳转、加载处理操作</p>
</blockquote>
<h3 id="十四、iOS事件响应机制"><a href="#十四、iOS事件响应机制" class="headerlink" title="十四、iOS事件响应机制"></a>十四、iOS事件响应机制</h3><p>iOS的事件响应必须是<code>UIResponder</code>对象及其子类，我们Command查看层级关系不难发现，<code>UITextView</code>，<code>UILabel</code>，<code>UIButton</code>等控件他们都是<code>UIResponder</code>的子类。这也是他们能够响应事件的基础。</p>
<p>当触摸事件发生时，首先系统通过<code>hitTest</code>方法找到能最合适的view，所谓最合适的view 其实就是 触摸事件 他的触摸点是否在这个View上，一个点可能在多个叠加的视图上，所以系统会找到所有的view（点所在的view），方向是从底下往上，所以判断点的顺序就是父view-&gt;子view-&gt;子view的子view，这样遍历下去，配合<code>pointconvert</code>方法和<code>pointinside</code>方法去判断这个点是否在这个view上，在就遍历他的子view，直到不满足条件。</p>
<p><strong>事件的传递</strong></p>
<p>系统把事件加入到一个由<code>UIApplication</code>管理的事件队列中<br>之所以加入队列而不是栈是因为队列先进先出，意味着先产生的事件，先处理</p>
<p>然后，事件会按照<code>UIApplication</code> -&gt; <code>UIWindow</code> -&gt; <code>SuperView</code> -&gt; <code>SubView</code>的顺序不断的检测</p>
<p>而检测就是靠两个方法<code>hitTest</code>与<code>pointInside</code></p>
<h3 id="十五、iOS内存管理"><a href="#十五、iOS内存管理" class="headerlink" title="十五、iOS内存管理"></a>十五、iOS内存管理</h3><p><strong>1.首先，严格的内存管理，能够是我们的应用程在性能上有很大的提高，如果忽略内存管理，可能导致应用占用内存过高，导致程序崩溃</strong></p>
<p><strong>2.内存管理方式主要分为3种:</strong></p>
<blockquote>
<p>ARC（自动内存计数）、MRC（手动内存计数）、内存池</p>
</blockquote>
<p><strong>3.自动内存计数和手动内存计数都是用计数管理</strong></p>
<blockquote>
<p>每个对象都有一个引用计数器，每个新对象的计数器是1，当对象的计数器减为0时，就会被销毁；<br>通过retain可以让对象的计数器+1、release可以让对象的计数器-1；<br>保证任何时候指向对象的指针个数和对象的引用计数相同，多一个指针指向这个对象这个对象的引用计数就加1，少一个指针指向这个对象这个对象的引用计数就减1。没有指针指向这个对象对象就被释放了。</p>
</blockquote>
<p><strong>4.内存管理遵循谁使用、谁创建；谁引用、谁管理的原则</strong></p>
<p><strong>5.被存入到自动释放池内的对象，当自动释放池被销毁时，会对池内的对象全部做一次release操作</strong></p>
<p><strong>6.自动释放池，什么时候创建?</strong></p>
<blockquote>
<p>程序刚启动的时候，也会创建一个自动释放池</p>
</blockquote>
<blockquote>
<p>产生事件以后，运行循环开始处理事件，就会创建自动释放池</p>
</blockquote>
<p><strong>7.什么时候销毁的?</strong></p>
<blockquote>
<p>程序运行结束之前销毁</p>
</blockquote>
<blockquote>
<p>事件处理结束以后，会销毁自动释放池</p>
</blockquote>
<blockquote>
<p>还有在池子满的时候，也会销毁</p>
</blockquote>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用方法总结</title>
    <url>/2019/06/08/Git%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p><strong>Git使用https协议，本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，每次pull,push都要输入密码，使用Git协议，使用ssh秘钥，可以省去每次输密码</strong></p>
<p>大概需要三个步骤：<br>一、本地生成密钥对；<br>二、设置github上的公钥；<br>三、修改git的remote url为git协议。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//git配置信息查询</span></pre></td></tr><tr><td class="code"><pre><span class="line">git config --list</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//全局配置Git账户</span></pre></td></tr><tr><td class="code"><pre><span class="line">git config --global user.name "用户名"</span></pre></td></tr><tr><td class="code"><pre><span class="line">git config --global user.email xxx账号邮箱@xxx.com</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//在某个Git仓库里，若是不同Git账号的话，去掉--global重新配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">git config user.name "用户名"</span></pre></td></tr><tr><td class="code"><pre><span class="line">git config user.email xxx账号邮箱@xxx.com</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//通过终端命令创建ssh key</span></pre></td></tr><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "xxxx账号邮箱@xx.com"</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//若没有创建过ssh key，会要求确认路径和输入密码，默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//终端查看.ssh/id_rsa.pub文件: </span></pre></td></tr><tr><td class="code"><pre><span class="line">open .ssh/id_rsa.pub</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//回车后，就会新弹出一个终端，然后复制里面的key,</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//或者用cat命令查看:</span></pre></td></tr><tr><td class="code"><pre><span class="line">cat .ssh/id_rsa.pub</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//登录GitHub，点击Settings，添加ssh key</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//添加ssh key完成后链接验证</span></pre></td></tr><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span></pre></td></tr><tr><td class="code"><pre><span class="line">//如果，看到：</span></pre></td></tr><tr><td class="code"><pre><span class="line">//Hi username! You've successfully authenticated, but GitHub does not # provide shell access.</span></pre></td></tr><tr><td class="code"><pre><span class="line">//就表示你的设置已经成功了。</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//提交本地项目到GitHub</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//1）在GitHub上新创建一个 repository或者Start a Project</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//2)Clone工程到本地一个空文件夹中</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//3)在Xcode中新创建一个工程，保存的路径为刚刚克隆下来的文件夹下</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//4)提交修改，首先切换到clone下来的的文件路径下：</span></pre></td></tr><tr><td class="code"><pre><span class="line">  然后输入:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//文件添加到仓库（.代表提交所有文件）,用命令git add告诉Git，把文件添加到仓库：</span></pre></td></tr><tr><td class="code"><pre><span class="line">git add .</span></pre></td></tr><tr><td class="code"><pre><span class="line">//把文件提交到仓库，-m后面的字符串为本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</span></pre></td></tr><tr><td class="code"><pre><span class="line">git commit -m "First Commit"</span></pre></td></tr><tr><td class="code"><pre><span class="line">//上传到github</span></pre></td></tr><tr><td class="code"><pre><span class="line">git push</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//修改本地的ssh remote url，不用https协议，改用git 协议</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//可以用git remote -v 查看你当前的remote url</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">origin https://github.com/someaccount/someproject.git (fetch)</span></pre></td></tr><tr><td class="code"><pre><span class="line">origin https://github.com/someaccount/someproject.git (push)</span></pre></td></tr><tr><td class="code"><pre><span class="line">//可以看到是使用https协议进行访问的。</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//使用浏览器登陆github，上面的ssh协议相应的url。类似如下：</span></pre></td></tr><tr><td class="code"><pre><span class="line">git@github.com:someaccount/someproject.git</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">//这时可以使用 git remote set-url 来调整你的url。</span></pre></td></tr><tr><td class="code"><pre><span class="line">git remote set-url origin git@github.com:someaccount/someproject.git</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">完了之后，再用 git remote -v 查看一下。</span></pre></td></tr></table></figure>

<p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>
<p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p>
<p>今天提交git仓库的时候，遇到了如截图所示的问题，提示Your branch is up-to-date with ‘origin/master’.</p>
<p><img src="https://i.loli.net/2019/12/19/SVFKb3kLymlONC2.png" alt="截屏2019-12-19上午12.35.16.png"></p>
<p>查了些资料后，发现其根本原因是版本分支的问题</p>
<h5 id="这时候我们就需要新建一个分支"><a href="#这时候我们就需要新建一个分支" class="headerlink" title="这时候我们就需要新建一个分支"></a>这时候我们就需要新建一个分支</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ git branch newbranch</span></pre></td></tr></table></figure>

<h5 id="然后检查分支是否创建成功"><a href="#然后检查分支是否创建成功" class="headerlink" title="然后检查分支是否创建成功"></a>然后检查分支是否创建成功</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ git branch</span></pre></td></tr></table></figure>

<p>会有如下提示（前面的*代表的是当前你所在的工作分支）</p>
<p><img src="https://i.loli.net/2019/12/19/vya3LgsZ7doUGSW.png" alt="截屏2019-12-19上午12.36.39.png"></p>
<h5 id="然后切换到你的新分支"><a href="#然后切换到你的新分支" class="headerlink" title="然后切换到你的新分支"></a>然后切换到你的新分支</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout newbranch</span></span></pre></td></tr></table></figure>

<p>如果不放心，还可以 $ git branch确认下</p>
<h5 id="然后将你的改动提交到新分支上"><a href="#然后将你的改动提交到新分支上" class="headerlink" title="然后将你的改动提交到新分支上"></a>然后将你的改动提交到新分支上</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add . </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"18.03.01"</span></span></span></pre></td></tr></table></figure>

<h5 id="然后git-status检查是否成功"><a href="#然后git-status检查是否成功" class="headerlink" title="然后git status检查是否成功"></a>然后<code>git status</code>检查是否成功</h5><p><img src="https://i.loli.net/2019/12/19/1tkOUYPfarSyjF9.png" alt="截屏2019-12-19上午12.37.14.png"></p>
<h5 id="然后切换到主分支"><a href="#然后切换到主分支" class="headerlink" title="然后切换到主分支"></a>然后切换到主分支</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span></pre></td></tr></table></figure>

<h5 id="然后将新分支提交的改动合并到主分支上"><a href="#然后将新分支提交的改动合并到主分支上" class="headerlink" title="然后将新分支提交的改动合并到主分支上"></a>然后将新分支提交的改动合并到主分支上</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge newbranch</span></span></pre></td></tr></table></figure>

<h5 id="然后就可以push代码了"><a href="#然后就可以push代码了" class="headerlink" title="然后就可以push代码了"></a>然后就可以push代码了</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span></pre></td></tr></table></figure>

<h5 id="最后还可以删除这个分支"><a href="#最后还可以删除这个分支" class="headerlink" title="最后还可以删除这个分支"></a>最后还可以删除这个分支</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -D newbranch</span></span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>消费者心理学：三个趣味经济学原理</title>
    <url>/2019/01/23/%E6%B6%88%E8%B4%B9%E8%80%85%E5%BF%83%E7%90%86%E5%AD%A6%EF%BC%9A%E4%B8%89%E4%B8%AA%E8%B6%A3%E5%91%B3%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="消费者心理学：三个趣味经济学原理"><a href="#消费者心理学：三个趣味经济学原理" class="headerlink" title="消费者心理学：三个趣味经济学原理"></a>消费者心理学：三个趣味经济学原理</h2><p>　降价、节约、免费，在互联网背景下成为不少商家打天下的三板斧。从不少国内企业的实践来看，效果并不那么理想。价格是商品价值实现的重要依据，文章中作者针对虚荣效应、节约悖论和免费经济学的三个领域的现象做出解释，在产品定价和营销等方面给出了建议。</p>
<p>　　价格越低为什么不但不好卖，反而价格越高越好卖，为什么大手大脚的浪费反而可以拯救经济?为什么免费未必就是最好的，这些经济学原理背后又有哪些逻辑在支撑，让我去探讨一下这些好玩的经济学吧。</p>
<h4 id="价格越高越好卖——虚荣效应"><a href="#价格越高越好卖——虚荣效应" class="headerlink" title="价格越高越好卖——虚荣效应"></a>价格越高越好卖——虚荣效应</h4><p>　 　富人们一般不喜欢大众模仿他们的消费行为，这种情况就叫做虚荣效应(snob effect)。虚荣效应具体是指购买商品的时候追求与众不同的个性的现象。在韩国也称为白鹭效应。因为对于某些人来说，即便是自己原本长期使用的商品， 一旦成为大众化商品的话，他们就会将其更换为并不广为人知的新商品，就好像如果一个地方的乌鸦大量涌进，白鹭就会离开一样。</p>
<p>　　1950 年，美国经济学家哈维莱宾斯坦(Harvey Leibenstein)同时发布了随着其他人的使用与否增加购买意图的从众效应(bandwagon effect)和随着其他人的使用与否减少购买意图的虚荣效应。如果某种商品成为广为人知的人气商品，则人人都想购买，这种现象就叫从众效应。英文中 bandwagon指游行队列中领头的乐队车辆，人们在大街上看到bandwagon就认为会有有意思的事情而无条件地跟随。从众效应就是指这种不细加考 虑就跟着别人做的消费行为。虚荣效应则是指与从众效应正好相反的现象。</p>
<p>　　但是，虚荣效应并不止于不购买大众消费品，也可以解释为对非大众性商品的购买需求，简单地说虚荣效应就是对高档商品的个性追求倾向。</p>
<p>　　虚荣效应主要有以下两种表现。</p>
<p>　　第一，高档商品刚上市的时候迅速购买。这是因为，在这一瞬间并不是每个人都能享受到消费高档商品的荣誉。</p>
<p>　　第二，不论之前如何热情赞美的商品，一旦其市场占有率达到一般大众都可以消费的水平就不再继续购买。这是因为人人都能购买使用的商品既不会让人感到荣誉，也不会有高档的感觉。</p>
<p>　　不过，这样的虚荣效应并不是在所有商品上都会出现。</p>
<p>　　商品越是高档，越是以个人消费为主的时候，虚荣效应越是明显。如果不是以个人消费为主，购买商品是为了向外部展示的时候，即便其价格高昂，也可能出现价格越高需求反而有所增加的从众效应。</p>
<p>　　如果认为商品目标市场中有较大的可能性出现虚荣效应的话，在建立营销计划时有必要留意以下三点。</p>
<p>　 　第一，相对于商品的市场占有率，更重视其终生价值(life time value)。也就是说，在市场战略的选择方面，相较于扩大客户数量，更注重把焦点集中在维持原有客户上，因为如果只关注眼前的利益而把重点放在市场扩张 上而忽视原有客户的话，总有一天会连原有客户都会离开。不仅如此，从某个时点开始，市场战略不能只停留在不再扩充新用户，还要做防止新用户流入的限制性营 销(demarketing)才行。</p>
<p>　　第二，要绝对回避价格竞争。降低价格会诱发两方面的问题。对价格比较敏感的一般大众会购买降价后的该商品，而这会降低商品的稀少性，导致现有客户的离开。而且，在市场中价格有时会成为商品品质的一种指标，所以价格的降低很容易导致商品品质的下降。</p>
<p>　 　第三，作为市场后入者，要尽量避免如”我也要做”(me too)形式的商业推进。因为具有虚荣效应的市场看起来会有很好的收益率而且竞争者也不多，但是，新的竞争者参与市场的同时，就有可能导致市场本身发生崩 溃。新竞争者的参与会增加消费，但因为虚荣效应，原来的客户可能会选择离开市场。原来的商家因为之前已经享受了高收益，所以还可以收回投资成本，而新加入 的竞争者就只能蒙受巨大的损失。</p>
<p>　　活跃在19世纪后期和20世纪初期的美国制度学派经济学家索尔斯坦凡勃伦(Thorstein Bunde Veblen)在其着作《有闲阶级论》中指出，虽然一般来说商品价格的上涨会导致需求的降低，但在某些商品上却存在着价格上涨反而导致需求增加的现象。通 常在价格昂贵的高档品牌上出现的这种现象被称做凡勃伦效应(Veblen effect)，而具有这种特性的商品就叫做凡勃伦商品(Veblen goods)。</p>
<p>　　相反，价格下降的时候需求也下降的商品称为吉芬商品(Giffen goods)。通常价格下降会导致需求上升，但是如果价格的下降导致的收入上升效果更大的话，就会降低对该商品的需求。实际上这种情况非常少见，只有在收 入中对该商品的消费支出占整体支出比例较大的情况下才会出现这种现象。</p>
<p>　　落后国家模仿发达国家的消费模式，或者低收入者模仿高收入者的消 费行为现象被经济学家杜森伯里(Dusenberry)称为示范效应(demonstration effect)。消费者的行为不受自身绝对收入的影响，而是取决于相对于周围其他人的收入，自己的收入处于什么水平。这就是相对收入假说。示范效应的核心 如下：社会中有从低档到高档多种商品的时候，想要更高档的商品是人之常情，而能够更多地接触到有较高社会地位者的人，他们的这种需求会更大。</p>
<p>　 　购买某种商品后，消费需求会向和该商品有关联的其他商品延伸。这种延伸效应就是狄德罗效应(Diderot effect)。狄德罗是18世纪法国启蒙思想家组织百科全书派的哲学家。有一天，狄德罗买了一件新的家居服，之后就觉得屋内的家具都显得很旧，于是为了 能跟家居服相匹配他换了新的书桌，然后换掉了壁挂的装饰品，最终换掉了所有家具。这就是狄德罗效应，相信这会是受装修业者欢迎的一种效应。</p>
<h4 id="大手大脚的浪费能拯救经济——节约悖论"><a href="#大手大脚的浪费能拯救经济——节约悖论" class="headerlink" title="大手大脚的浪费能拯救经济——节约悖论"></a>大手大脚的浪费能拯救经济——节约悖论</h4><p>　　我们都知道，如果消费超过收入，就没有余钱可以储蓄，也就无法积累资金，最终只能过贫穷的生活。所以，为了成为富人我们会努力工作，有时候也会变成小气鬼，为了能储蓄更多钱而努力。</p>
<p>　　这个原理对于个人是适用的，但是对于国家整体经济是否也适用呢?如果所有国民都变成小气鬼，这个国家真的能够变得更加富强吗?答案是否定的，尤其是在经济不景气的时候。让我们看看其原因何在。</p>
<p>　 　一旦经济进入不景气，基于对未来的担忧，人们会选择更多的储蓄进而减少消费。可是如果所有人都减少消费的话，企业的销售额就会降低，库存就会增加。随之 而来的是企业只能降低生产减少雇用，而企业员工的收入就会减少。那么，对未来的担忧就会强化，人们会更加坚定地减少消费增加储蓄，于是整体经济就会陷入愈 发不景气的恶性循环中。</p>
<p>　　这就出现了以个人的角度看储蓄是合理的行为，而从整体经济上又是不合理的悖论。这称为节约悖论(paradox of thrift)。在逻辑学上对个体适合丶对整体不适合的现象叫做合成谬误(fallacy of composition)，节约悖论正是属于这种合成谬误。</p>
<p>　　20世纪30年代，全世界陷入严重经济衰退的时候，出现了这样的节约悖论。 面对不景气的局面，商家都减少了消费，于是经济陷入更大的不景气中。洞察这一悖论状况的英国经济学家约翰梅纳德凯恩斯开出了如果家庭不能扩大消费的话，政 府也应该承担财政赤字、扩大政府支出的处方。因为只有这样，整体经济的需求才会扩大，企业的销售额才会增加，生产和雇用状况也才能够得到改善。最终通过增 加家庭收入的方式扩大家庭的消费。正因为凯恩斯透彻地了解个体储蓄和整体储蓄之间的区别，才有可能拿出这样的解决方案。凯恩斯在他的《就业、利息和货币通 论》的书中就指出：在经济不景气的时候，消费就是美德，储蓄就是恶行。</p>
<p>　　不过，凯恩斯并不是第一个认识到这种状况的人。比凯恩斯还早 200多年的18世纪初，伯纳德曼德维尔(Bernard Mandeville)就已经看穿了这种现象。让我们看看出生在荷兰的医生兼英国自由主义思想家的伯纳德曼德维尔于1714年为了讽刺英国社会而写的《蜜 蜂的寓言》(The Fable of the Bees)中的讽刺诗《嗡嗡的蜂巢》(The Grumbling Hive)吧。这首诗的副标题为”个人的恶行或公共的利益”。</p>
<p>　　从前，有一个非常繁荣的蜜蜂王国。国王和贵族们虽然欠下了巨大的债务，但是依然建设豪华的宫殿和别墅，穿着华丽的服装，每天用山珍海味举办各种派对。</p>
<p>　　这个国家用强有力的军队侵略周边国家以扩大自己的殖民地。当很多士兵在战场上牺牲的时候，大部分将军躲在后方的地洞中。不过每次凯旋的时候他们总是像英雄一样站在最前面，而勋章也都是归他们所有。</p>
<p>　　各种裁判的结果并不是取决于是非的判断，而是取决于给法官和律师的贿赂。商品的订单总是接连不断，产业链从上到下都业务不断，所有人都能尽情享受奢华的生活。</p>
<p>　 　有一天恶行盛行的蜜蜂王国里突然出现了一位高僧，表示所有人都应该悔改，并开始念诵咒语。于是蜜蜂们认识到了自己的过失，发誓要过清廉正直的生活。王后 和贵族们把宫殿和奢华服装都卖掉偿还了债务，开始了一年到头只穿一件衣服的简朴生活，解散了军队，关闭了剧场。因为每个人都捍卫正直的生活，所以裁判也变 成了没有必要的事情了。</p>
<p>　　于是，派对和演出消失了，制作豪华服装的裁缝和厨师丶木工丶石匠丶雕刻师丶演员等纷纷失业。蜜蜂们甚至觉得生活在建筑里也是一种奢侈，都搬到树洞中居住。</p>
<p>　　后来，原殖民地的异邦蜜蜂们大举进攻蜜蜂王国，将所有善良的蜜蜂都抓去当了奴隶，从此善良蜜蜂们就只能每天过着战战兢兢的悲惨生活。</p>
<p>　 　曼德维尔想通过这个故事传达什么样的信息呢?他主张单纯靠具备好的德行是无法让国民过上好生活的，并且认为通过节约和储蓄，个人虽然可以增加财富，但在 国家层面上这个逻辑是完全行不通的。他以禁欲和利他心是伪善的，普遍认为是恶行的欲望正是经济发展的原动力这样的观点正面挑战了基督教的伦理观。谴责他的 人因为他公开拥护恶行而用谐音称他为人间恶魔(Man-Devil)。</p>
<p>　　200年后的凯恩斯非常喜欢曼德维尔的这首诗，为了强调20世纪30年代的经济衰退的原因是有效需求的不足，凯恩斯在其代表作《就业丶利息和货币通论》中引用了曼德维尔的《蜜蜂的寓言》。</p>
<p>　　1666年，伦敦发生大火灾，整个英国陷入危机。但是曼德维尔曾乐观地表示，虽然伦敦大火灾是巨大的灾难，但是在重建伦敦的过程中扩大的有效需求会激活英国经济。</p>
<p>　　现在，电视和报纸中还会经常报道经济不景气中老百姓缩衣节食，而富人们大肆购买昂贵的名牌货，过着奢华生活的现状，指责富人们的消费行为。但是，从节约悖论上看，富人们的这种消费能够增加整体需求，反而是在帮助经济尽快恢复。</p>
<p>　　如果商家不能扩大消费的话，政府也应该出面扩大政府支出，为企业提供投资优惠条件，而且要努力吸引外国投资者和观光客，增加投资和消费。只有这样才能形成良性循环最终让经济景气起来。</p>
<h4 id="免费未必就好——免费经济学"><a href="#免费未必就好——免费经济学" class="headerlink" title="免费未必就好——免费经济学"></a>免费未必就好——免费经济学</h4><p>　　“世上没有免费的午餐”是1976年获得诺贝尔经济学奖的着名经济学家米尔顿弗里德曼(Milton Friedman)常说的一句话。</p>
<p>　　有的信息粗看之下似乎是免费的，实际上经过了解后发现并不是免费的意思;或者可以解释为免费后面隐藏着某种诱饵，还可以理解为不要期待不付出代价的免费东西。就像”免费的奶酪只存在于捕鼠器上”的俄罗斯谚语一样，对免费的东西保持警惕是亘古不变的道理。</p>
<p>　　不过，有真正免费的主张逐渐占了上风。就像劣币驱逐良币一样，免费驱逐收费的趋势得到了强化。英国的《经济学人》展望2008年的时候把这样的趋势命名为免费经济学(freeconomics)，将单词免费(free)和经济学(economics)合起来形成新词。</p>
<p>　 　2007年唱片业发生了一个大事件。人气歌手普林斯(Prince)通过英国《星期日邮报》免费派送新专辑Planet Earth的CD，数量达到了300万张。听了唱片的人去演唱会的概率会更高一些，但是也没有一定如此的保障。当然，也可能是因为预料到即便不免费派送人 们也会进行非法复制和传播，所以才免费派送。总之，这真是一个令人震惊的做法。</p>
<p>　　韩国也有过类似的情况。2007年LG电子出品了具备MP3强化功能的高档音乐手机。世界级的音质专家马克李文森为手机安装了可以保证音响效果并且用手指可以灵活控制的操控键，利用高级听筒保证了MP3功能。这个手机中搭载了成诗京丶孙昊永等7名顶尖歌手的唱片。</p>
<p>　　在手机公司采用这样的免费战略之前，谷歌很早就提供了大空间的免费邮箱服务GMAIL,UCC网站youtube也提供了大容量的免费视频空间，网络电话服务商Skype也给消费者提供了免费的长途电话丶国际长途业务。</p>
<p>　 　从很早开始，酒吧里就免费提供下酒小菜，为什么这种策略会奏效呢?这是因为在提供了花生等下酒小菜的时候，人们喝酒的概率会变大。更进一步的，美国的酒 吧里清水也是收费的，理由很简单，水喝多了喝酒的概率就会降低。简单说下酒小菜和酒是辅助关系，而清水和酒则是竞争关系。酒吧主人们通过过去丰富的经验， 一直采用这样的销售策略。</p>
<p>　　看看我们周围，就能发现很多免费营销，地铁站前的免费报纸就是其中一种。曾经威胁到日报和体育报纸的免费报纸 因为有很多读者，所以可以从广告收入上获得高收益。人气差的免费报纸会因为得不到足够的广告收入而被淘汰，这样的话，幸存下来的免费报纸就可以逐步占据更 加有利的位置。越是资金实力雄厚的公司，在这种免费竞争中能够生存下来的概率就越大。因此，消费者也可能会面临因为垄断招致的损失。</p>
<p>　　免费经济市场的另一个弊端就是对资源的浪费。以免费报纸为例，因为免费派发给消费者，所以新闻纸会被大量浪费掉。大量生产大量消费的体制会导致能源的过度使用而招致地球变暖势头的加速。</p>
<p>　 　企业经营专家中，几乎没有人不知道汤姆彼得斯(Tom Peters)的，他之所以如此有名是因为他于1982年和罗伯特沃特曼合着出版了《追求卓越》一书。有意思的是这本书出版之前，他们制作了1.5万部的 试读版免费派发给对此书有兴趣的读者。当然，这令出版社大吃一惊，因为它们认为这本书本来销量就不会很大，还免费派发这么多试读版。不过，这本书能够成为 超级畅销书也正是这个免费试读版的功劳。阅读了试读版后感受良多的读者在此书正式出版之后蜂拥购买，导致此书销量激增。托免费派发策略的福，汤姆彼得斯成 了超级畅销书作者丶顶级演讲家和顶级咨询专家。</p>
<p>　　韩国的公务员和企业家总是因为腐败问题受到指责，所以以往很普遍的请客吃饭 等现象现在大多被禁止了。因为在大多数情况下，这样的请客吃饭都是有所求的。因即时贴和透明胶带而着名的3M公司的道德经营就非常彻底，该公司企业道德规 定条例在礼品赠送的项目下面有这样一条：”给业务相关方提供的礼品每年不能超过50美元，咖啡和多纳圈除外。”所以，不用因免费的咖啡和多纳圈而产生罪恶 感。于是我们可以得出这样的结论：”没有免费的午餐，但是有免费的咖啡。”</p>
<p>　　                                                                              （来源：《最好用的101个经济法则》文/金敏周 翻译/权成光）</p>
]]></content>
      <categories>
        <category>经济学</category>
      </categories>
      <tags>
        <tag>经济学</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS底层原理总结 - 探寻OC对象的本质</title>
    <url>/2018/07/17/iOS%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93%20-%20%E6%8E%A2%E5%AF%BBOC%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
    <content><![CDATA[<p>转载自：<a href="https://www.jianshu.com/p/91a9176851cd" target="_blank" rel="noopener">iOS底层原理总结</a></p>
<p>对小码哥底层班视频学习的总结与记录。面试题部分，通过对面试题的分析探索问题的本质内容。</p>
<blockquote>
<p>面试题：一个NSObject对象占用多少内存？</p>
</blockquote>
<p>探寻OC对象的本质，我们平时编写的Objective-C代码，底层实现其实都是C\C++代码。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1434508-7c3e4ae59cb80fc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="img"></p>
<p>OC的对象结构都是通过基础C\C++的结构体实现的。<br>我们通过创建OC文件及对象，并将OC文件转化为C++文件来探寻OC对象的本质</p>
<p>OC如下代码</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Hello, World!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>我们通过命令行将OC的mian.m文件转化为c++文件。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">clang -rewrite-objc main.m -o main.cpp <span class="comment">// 这种方式没有指定架构例如arm64架构 其中cpp代表（c plus plus）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">生成 main.cpp</span></pre></td></tr></table></figure>

<p>我们可以指定架构模式的命令行，使用xcode工具 xcrun</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">xcrun</span> <span class="selector-tag">-sdk</span> <span class="selector-tag">iphoneos</span> <span class="selector-tag">clang</span> <span class="selector-tag">-arch</span> <span class="selector-tag">arm64</span> <span class="selector-tag">-rewrite-objc</span> <span class="selector-tag">main</span><span class="selector-class">.m</span> <span class="selector-tag">-o</span> <span class="selector-tag">main-arm64</span><span class="selector-class">.cpp</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line">生成 <span class="selector-tag">main-arm64</span><span class="selector-class">.cpp</span></span></pre></td></tr></table></figure>

<p>main-arm64.cpp 文件中搜索NSObjcet，可以找到NSObjcet_IMPL（IMPL代表 implementation 实现）</p>
<p>我们看一下NSObject_IMPL内部</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NSObject_IMPL</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class isa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 查看Class本质</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> *<span class="title">Class</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//我们发现Class其实就是一个指针，对象底层实现其实就是这个样子。</span></span></pre></td></tr></table></figure>

<p>思考： 一个OC对象在内存中是如何布局的。<br> NSObjcet的底层实现，点击NSObjcet进入发现NSObject的内部实现</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">@interface NSObject &lt;NSObject&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic push</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic ignored <span class="meta-string">"-Wobjc-interface-ivars"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic pop</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">@end</span></pre></td></tr></table></figure>

<p>转化为c语言其实就是一个结构体</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NSObject_IMPL</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class isa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<blockquote>
<p>那么这个结构体占多大的内存空间呢，我们发现这个结构体只有一个成员，isa指针，而指针在64位架构中占8个字节。也就是说一个NSObjec对象所占用的内存是8个字节。到这里我们已经可以基本解答第一个问题。但是我们发现NSObject对象中还有很多方法，那这些方法不占用内存空间吗？其实类的方法等也占用内存空间，但是这些方法所占用的存储空间并不在NSObject对象中。</p>
</blockquote>
<p>为了探寻OC对象在内存中如何体现，我们来看下面一段代码</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</span></pre></td></tr></table></figure>

<p>上面一段代码在内存中如何体现的呢？</p>
<p>上述一段代码中系统为NSObject对象分配8个字节的内存空间，用来存放一个成员isa指针。</p>
<p>那么isa指针这个变量的地址就是结构体的地址，也就是NSObjcet对象的地址。<br> 假设isa的地址为0x100400110，那么上述代码分配存储空间给NSObject对象，然后将存储空间的地址赋值给objc指针。</p>
<p>objc存储的就是isa的地址</p>
<p>objc指向内存中NSObject对象地址，即指向内存中的结构体，也就是isa的位置。</p>
<h3 id="自定义类的内部实现"><a href="#自定义类的内部实现" class="headerlink" title="自定义类的内部实现"></a>自定义类的内部实现</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">NSObject</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@public</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Student *stu = [[Student alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        stu -&gt; _no = <span class="number">4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        stu -&gt; _age = <span class="number">5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,stu);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr></table></figure>

<p>按照上述步骤同样生成c++文件。并查找Student，我们发现Student_IMPL</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student_IMPL</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NSObject_IMPL</span> <span class="title">NSObject_IVARS</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<p>发现第一个是 NSObject_IMPL的实现。而通过上面的实验我们知道NSObject_IMPL内部其实就是Class isa<br> 那么我们假设 struct NSObject_IMPL NSObject_IVARS; 等价于 Class isa;</p>
<p>可以将上述代码转化为</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student_IMPL</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class *isa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>

<p>因此此结构体占用多少存储空间，对象就占用多少存储空间。因此结构体占用的存储空间为，isa指针8个字节空间+int类型_no4个字节空间+int类型_age4个字节空间共16个字节空间</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">Student *stu = [[Student alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">stu -&gt; _no = <span class="number">4</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">stu -&gt; _age = <span class="number">5</span>;</span></pre></td></tr></table></figure>

<p>那么上述代码实际上在内存中的体现为，创建Student对象首先会分配16个字节，存储3个东西，isa指针8个字节，4个字节的_no ,4个字节的_age</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/18569867-7779e69767c0143c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img"></p>
<p>image.png</p>
<p>sutdent对象的3个变量分别有自己的地址。而stu指向isa指针的地址。因此stu的地址为0x100400110，stu对象在内存中占用16个字节的空间。并且经过赋值，_no里面存储4 ，_age里面存储5</p>
<p>验证Student在内存中模样</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Student_IMPL &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class isa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">NSObject</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@public</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">// 强制转化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">struct</span> Student_IMPL *stuImpl = (__bridge <span class="keyword">struct</span> Student_IMPL *)stu;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"_no = %d, _age = %d"</span>, stuImpl-&gt;_no, stuImpl-&gt;_age); <span class="comment">// 打印出 _no = 4, _age = 5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上述代码将oc对象强转成Student_IMPL的结构体。也就是说把一个指向oc对象的指针，指向这种结构体。由于我们之前猜想，对象在内存中的布局与结构体在内存中的布局相同，那么如果可以转化成功，说明我们的猜想正确。由此说明stu这个对象指向的内存确实是一个结构体。</p>
<p>实际上想要获取对象占用内存的大小，可以通过更便捷的运行时方法来获取。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">class_getInstanceSize([Student <span class="class"><span class="keyword">class</span>])</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">NSLog(@<span class="string">"%zd,%zd"</span>, class_getInstanceSize([NSObject <span class="class"><span class="keyword">class</span>]) ,<span class="type">class_getInstanceSize</span></span>([Student <span class="class"><span class="keyword">class</span>]));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 打印信息 8和16</span></span></pre></td></tr></table></figure>

<h4 id="窥探内存结构"><a href="#窥探内存结构" class="headerlink" title="窥探内存结构"></a>窥探内存结构</h4><p>实时查看内存数据</p>
<p><strong>方式一：通过打断点。</strong><br> Debug Workflow -&gt; viewMemory address中输入stu的地址</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-1c2f8f333637cb41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<p>image</p>
<p>从上图中，我们可以发现读取数据从高位数据开始读，查看前16位字节，每四个字节读出的数据为<br> 16进制 0x0000004(4字节) 0x0000005(4字节) isa的地址为 00D1081000001119(8字节)</p>
<p><strong>方式二：通过lldb指令xcode自带的调试器</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">memory read <span class="number">0x10074c450</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 简写  x 0x10074c450</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 增加读取条件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// memory read/数量格式字节数  内存地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 简写 x/数量格式字节数  内存地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 格式 x是16进制，f是浮点，d是10进制</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 字节大小   b：byte 1字节，h：half word 2字节，w：word 4字节，g：giant word 8字节</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">示例：x/<span class="number">4</span>xw    <span class="comment">//   /后面表示如何读取数据 w表示4个字节4个字节读取，x表示以16进制的方式读取数据，4则表示读取4次</span></span></pre></td></tr></table></figure>

<p>同时也可以通过lldb修改内存中的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">memory write 0x100400c68 6</span></pre></td></tr><tr><td class="code"><pre><span class="line">将_no的值改为了6</span></pre></td></tr></table></figure>

<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-0f4104937adf7401.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/724/format/webp" alt="img"></p>
<p>image</p>
<blockquote>
<p>那么一个NSObject对象占用多少内存？<br> <strong>NSObjcet实际上是只有一个名为isa的指针的结构体，因此占用一个指针变量所占用的内存空间大小，如果64bit占用8个字节，如果32bit占用4个字节。</strong></p>
</blockquote>
<h2 id="更复杂的继承关系"><a href="#更复杂的继承关系" class="headerlink" title="更复杂的继承关系"></a>更复杂的继承关系</h2><blockquote>
<p>面试题：在64bit环境下， 下面代码的输出内容？</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Person */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* Student */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">Person</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%zd  %zd"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">              class_getInstanceSize([Person <span class="keyword">class</span>]),</span></pre></td></tr><tr><td class="code"><pre><span class="line">              class_getInstanceSize([Student <span class="keyword">class</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">              );</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<blockquote>
<p>这道面试题的实质是想问一个Person对象，一个Student对象分别占用多少内存空间？</p>
</blockquote>
<p>我们依据上面的分析与发现，类对象实质上是以结构体的形式存储在内存中，画出真正的内存图例</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-dded6a79a629de09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1056/format/webp" alt="img"></p>
<p>image</p>
<p><strong>我们发现只要是继承自NSObject的对象，那么底层结构体内一定有一个isa指针。</strong><br> 那么他们所占的内存空间是多少呢？单纯的将指针和成员变量所占的内存相加即可吗？上述代码实际打印的内容是16 16，也就是说，person对象和student对象所占用的内存空间都为16个字节。<br> 其实实际上person对象确实只使用了12个字节。但是因为内存对齐的原因。使person对象也占用16个字节。</p>
<blockquote>
<p>编译器在给结构体开辟空间时，首先找到结构体中最宽的基本数据类型，然后寻找内存地址能是该基本数据类型的整倍的位置，作为结构体的首地址。将这个最宽的基本数据类型的大小作为对齐模数。<br> 为结构体的一个成员开辟空间之前，编译器首先检查预开辟空间的首地址相对于结构体首地址的偏移是否是本成员的整数倍，若是，则存放本成员，反之，则在本成员和上一个成员之间填充一定的字节，以达到整数倍的要求，也就是将预开辟空间的首地址后移几个字节。</p>
</blockquote>
<blockquote>
<p>我们可以总结内存对齐为两个原则：<br> <strong>原则 1. 前面的地址必须是后面的地址正数倍,不是就补齐。</strong><br> <strong>原则 2. 整个Struct的地址必须是最大字节的整数倍。</strong></p>
</blockquote>
<p>通过上述内存对齐的原则我们来看，person对象的第一个地址要存放isa指针需要8个字节，第二个地址要存放_age成员变量需要4个字节，根据原则一，8是4的整数倍，符合原则一，不需要补齐。然后检查原则2，目前person对象共占据12个字节的内存，不是最大字节数8个字节的整数倍，所以需要补齐4个字节，因此person对象就占用16个字节空间。</p>
<p>而对于student对象，我们知道sutdent对象中，包含person对象的结构体实现，和一个int类型的_no成员变量，同样isa指针8个字节，_age成员变量4个字节，_no成员变量4个字节，刚好满足原则1和原则2，所以student对象占据的内存空间也是16个字节。</p>
<h3 id="OC对象的分类"><a href="#OC对象的分类" class="headerlink" title="OC对象的分类"></a>OC对象的分类</h3><blockquote>
<p>面试题：OC的类信息存放在哪里。<br> 面试题：对象的isa指针指向哪里。</p>
</blockquote>
<p>示例代码</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* Person */</span> </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@public</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">int</span> height;</span></pre></td></tr><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)personMethod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)personClassMethod;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)personMethod &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)personClassMethod &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* Student */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">Person</span> &lt;<span class="title">NSCoding</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@public</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> _no;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">int</span> score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)studentMethod;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)studentClassMethod;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)studentMethod &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)studentClassMethod &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">@end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;      </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSObject</span> *object1 = [[<span class="built_in">NSObject</span> alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">NSObject</span> *object2 = [[<span class="built_in">NSObject</span> alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Student *stu = [[Student alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [Student load];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Person *p1 = [[Person alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p1-&gt;_age = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [p1 personMethod];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        [Person personClassMethod];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Person *p2 = [[Person alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p2-&gt;_age = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>OC的类信息存放在哪里</strong><br> OC对象主要可以分为三种</p>
<ol>
<li>instance对象（实例对象）</li>
<li>class对象（类对象）</li>
<li>meta-class对象（元类对象）</li>
</ol>
<p><strong>instance对象就是通过类alloc出来的对象，每次调用alloc都会产生新的instance对象</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSObjcet</span> *object1 = [[<span class="built_in">NSObjcet</span> alloc] init];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">NSObjcet</span> *object2 = [[<span class="built_in">NSObjcet</span> alloc] init];</span></pre></td></tr></table></figure>

<p>object1和object2都是NSObject的instace对象（实例对象），但他们是不同的两个对象，并且分别占据着两块不同的内存。<br> instance对象在内存中存储的信息包括</p>
<ol>
<li>isa指针</li>
<li>其他成员变量</li>
</ol>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-c564b99ce9ba8c10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1083/format/webp" alt="img"></p>
<p>image</p>
<blockquote>
<p>衍生问题：在上图实例对象中根本没有看到方法，那么实例对象的方法的代码放在什么地方呢？那么类的方法的信息，协议的信息，属性的信息都存放在什么地方呢？</p>
</blockquote>
<p><strong>class对象</strong><br> 我们通过class方法或runtime方法得到一个class对象。class对象也就是类对象</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">Class objectClass1 = [object1 <span class="class"><span class="keyword">class</span>];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass2 = [object2 <span class="class"><span class="keyword">class</span>];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass3 = [NSObject <span class="class"><span class="keyword">class</span>];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// runtime</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass4 = object_getClass(object1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass5 = object_getClass(object2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">NSLog(@<span class="string">"%p %p %p %p %p"</span>, objectClass1, objectClass2, objectClass3, objectClass4, objectClass5);</span></pre></td></tr></table></figure>

<p><strong>每一个类在内存中有且只有一个class对象。可以通过打印内存地址证明</strong></p>
<p>class对象在内存中存储的信息主要包括</p>
<ol>
<li>isa指针</li>
<li>superclass指针</li>
<li>类的属性信息（@property），类的成员变量信息（ivar）</li>
<li>类的对象方法信息（instance method），类的协议信息（protocol）</li>
</ol>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-c3527113c4cc1c08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/316/format/webp" alt="img"></p>
<p>image</p>
<p><strong>成员变量的值时存储在实例对象中的，因为只有当我们创建实例对象的时候才为成员变赋值。但是成员变量叫什么名字，是什么类型，只需要有一份就可以了。所以存储在class对象中。</strong></p>
<p>类方法放在那里？<br> <strong>元类对象 meta-class</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//runtime中传入类对象此时得到的就是元类对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectMetaClass = object_getClass([<span class="built_in">NSObject</span> <span class="keyword">class</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 而调用类对象的class方法时得到还是类对象，无论调用多少次都是类对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class cls = [[<span class="built_in">NSObject</span> <span class="keyword">class</span>] <span class="keyword">class</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass3 = [<span class="built_in">NSObject</span> <span class="keyword">class</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">class_isMetaClass(objectMetaClass) <span class="comment">// 判断该对象是否为元类对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%p %p %p"</span>, objectMetaClass, objectClass3, cls); <span class="comment">// 后面两个地址相同，说明多次调用class得到的还是类对象</span></span></pre></td></tr></table></figure>

<p><strong>每个类在内存中有且只有一个meta-class对象。</strong><br> meta-class对象和class对象的内存结构是一样的，但是用途不一样，在内存中存储的信息主要包括</p>
<ol>
<li>isa指针</li>
<li>superclass指针</li>
<li>类的类方法的信息（class method）</li>
</ol>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-4aca671a18181443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/328/format/webp" alt="img"></p>
<p>image</p>
<p><strong>meta-class对象和class对象的内存结构是一样的，所以meta-class中也有类的属性信息，类的对象方法信息等成员变量，但是其中的值可能是空的。</strong></p>
<p><strong>对象的isa指针指向哪里</strong></p>
<ol>
<li>当对象调用实例方法的时候，我们上面讲到，实例方法信息是存储在class类对象中的，那么要想找到实例方法，就必须找到class类对象，那么此时isa的作用就来了。</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">stu studentMethod</span>];</span></pre></td></tr></table></figure>

<p><strong>instance的isa指向class，当调用对象方法时，通过instance的isa找到class，最后找到对象方法的实现进行调用。</strong></p>
<ol>
<li>当类对象调用类方法的时候，同上，类方法是存储在meta-class元类对象中的。那么要找到类方法，就需要找到meta-class元类对象，而class类对象的isa指针就指向元类对象</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Student studentClassMethod</span>];</span></pre></td></tr></table></figure>

<p><strong>class的isa指向meta-class<br> 当调用类方法时，通过class的isa找到meta-class，最后找到类方法的实现进行调用</strong></p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-e71cf3850379fe21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1145/format/webp" alt="img"></p>
<p>image</p>
<ol>
<li>当对象调用其父类对象方法的时候，又是怎么找到父类对象方法的呢？，此时就需要使用到class类对象superclass指针。</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">stu personMethod</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[<span class="meta">stu init</span>];</span></pre></td></tr></table></figure>

<p><strong>当Student的instance对象要调用Person的对象方法时，会先通过isa找到Student的class，然后通过superclass找到Person的class，最后找到对象方法的实现进行调用，同样如果Person发现自己没有响应的对象方法，又会通过Person的superclass指针找到NSObject的class对象，去寻找响应的方法</strong></p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-c424291af118ebad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<p>image</p>
<ol>
<li>当类对象调用父类的类方法时，就需要先通过isa指针找到meta-class，然后通过superclass去寻找响应的方法</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Student personClassMethod</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">[<span class="meta">Student load</span>];</span></pre></td></tr></table></figure>

<p><strong>当Student的class要调用Person的类方法时，会先通过isa找到Student的meta-class，然后通过superclass找到Person的meta-class，最后找到类方法的实现进行调用</strong></p>
<p>最后又是这张静定的isa指向图，经过上面的分析我们在来看这张图，就显得清晰明了很多。</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-49ba7d6446b3ded2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/449/format/webp" alt="img"></p>
<p>image</p>
<blockquote>
<p><strong>对isa、superclass总结</strong></p>
<ol>
<li>instance的isa指向class</li>
<li>class的isa指向meta-class</li>
<li>meta-class的isa指向基类的meta-class，基类的isa指向自己</li>
<li>class的superclass指向父类的class，如果没有父类，superclass指针为nil</li>
<li>meta-class的superclass指向父类的meta-class，基类的meta-class的superclass指向基类的class</li>
<li>instance调用对象方法的轨迹，isa找到class，方法不存在，就通过superclass找父类</li>
<li>class调用类方法的轨迹，isa找meta-class，方法不存在，就通过superclass找父类</li>
</ol>
</blockquote>
<h3 id="如何证明isa指针的指向真的如上面所说？"><a href="#如何证明isa指针的指向真的如上面所说？" class="headerlink" title="如何证明isa指针的指向真的如上面所说？"></a>如何证明isa指针的指向真的如上面所说？</h3><p>我们通过如下代码证明：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">NSObject *<span class="keyword">object</span> = [[NSObject alloc] <span class="keyword">init</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass = [NSObject <span class="class"><span class="keyword">class</span>];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectMetaClass = object_getClass([NSObject <span class="class"><span class="keyword">class</span>]);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">NSLog(@<span class="string">"%p %p %p"</span>, <span class="keyword">object</span>, objectClass, objectMetaClass);</span></pre></td></tr></table></figure>

<p>打断点并通过控制台打印相应对象的isa指针</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-00e99ea5045212df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/407/format/webp" alt="img"></p>
<p>image</p>
<p>我们发现object-&gt;isa与objectClass的地址不同，这是因为从64bit开始，isa需要进行一次位运算，才能计算出真实地址。而位运算的值我们可以通过下载<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fopensource.apple.com%2Ftarballs%2Fobjc4%2F" target="_blank" rel="noopener">objc源代码</a>找到。</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-276d3011130264db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/453/format/webp" alt="img"></p>
<p>image</p>
<p>我们通过位运算进行验证。</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-f2268e81904fb832.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/470/format/webp" alt="img"></p>
<p>image</p>
<p>我们发现，object-isa指针地址0x001dffff96537141经过同0x00007ffffffffff8位运算，得出objectClass的地址0x00007fff96537140</p>
<p>接着我们来验证class对象的isa指针是否同样需要位运算计算出meta-class对象的地址。<br> 当我们以同样的方式打印objectClass-&gt;isa指针时，发现无法打印</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-38ec0ad027ade31e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1046/format/webp" alt="img"></p>
<p>image</p>
<p>同时也发现左边objectClass对象中并没有isa指针。我们来到Class内部看一下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> *<span class="title">Class</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !__OBJC2__</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_ivar_list</span> * _<span class="title">Nullable</span> <span class="title">ivars</span>                  <span class="title">OBJC2_UNAVAILABLE</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_method_list</span> * _<span class="title">Nullable</span> * _<span class="title">Nullable</span> <span class="title">methodLists</span>                    <span class="title">OBJC2_UNAVAILABLE</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_cache</span> * _<span class="title">Nonnull</span> <span class="title">cache</span>                       <span class="title">OBJC2_UNAVAILABLE</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_protocol_list</span> * _<span class="title">Nullable</span> <span class="title">protocols</span>          <span class="title">OBJC2_UNAVAILABLE</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; OBJC2_UNAVAILABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></span></pre></td></tr></table></figure>

<p>相信了解过isa指针的同学对objc_class结构体内的内容很熟悉了，今天这里不深入研究，我们只看第一个对象是一个isa指针，为了拿到isa指针的地址，我们自己创建一个同样的结构体并通过强制转化拿到isa指针。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xx_cc_objc_class</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class isa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Class objectClass = [NSObject class];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">xx_cc_objc_class</span></span> *objectClass2 = (__bridge <span class="class"><span class="keyword">struct</span> <span class="title">xx_cc_objc_class</span></span> *)(objectClass);</span></pre></td></tr></table></figure>

<p>此时我们重新验证一下</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/1434508-878ba6c819b229a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/499/format/webp" alt="img"></p>
<p>image</p>
<p>确实，objectClass2的isa指针经过位运算之后的地址是meta-class的地址。</p>
<h3 id="本文面试题总结："><a href="#本文面试题总结：" class="headerlink" title="本文面试题总结："></a>本文面试题总结：</h3><ol>
<li>一个NSObject对象占用多少内存？<br> 答：一个指针变量所占用的大小（64bit占8个字节，32bit占4个字节）</li>
<li>对象的isa指针指向哪里？<br> 答：instance对象的isa指针指向class对象，class对象的isa指针指向meta-class对象，meta-class对象的isa指针指向基类的meta-class对象，基类自己的isa指针也指向自己。</li>
<li>OC的类信息存放在哪里？<br> 答：成员变量的具体值存放在instance对象。对象方法，协议，属性，成员变量信息存放在class对象。类方法信息存放在meta-class对象。</li>
</ol>
<h3 id="底层原理相关文章："><a href="#底层原理相关文章：" class="headerlink" title="底层原理相关文章："></a>底层原理相关文章：</h3><p><a href="https://www.jianshu.com/notebooks/24110540" target="_blank" rel="noopener">iOS底层原理总结 - 文集</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>OC</tag>
      </tags>
  </entry>
</search>
